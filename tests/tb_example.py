#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Author:  Dominik Gresch <greschd@gmx.ch>
# Date:    15.10.2014 10:22:43 CEST
# File:    tb_example.py

from common import *

import types

class TbExampleTestCase(CommonTestCase):

    def createH(self, t1, t2):

        self.H = z2pack.tb.Hamilton()

        # create the two atoms
        self.H.add_atom(([1, 1], 1), [0, 0, 0])
        self.H.add_atom(([-1, -1], 1), [0.5, 0.5, 0])

        # add hopping between different atoms
        self.H.add_hopping(((0, 0), (1, 1)),
                           z2pack.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, -1j, 1j, -1])
        self.H.add_hopping(((0, 1), (1, 0)),
                           z2pack.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, 1j, -1j, -1])

        # add hopping between neighbouring orbitals of the same type
        self.H.add_hopping((((0, 0), (0, 0)), ((0, 1), (0, 1))),
                           z2pack.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           t2,
                           phase=[1])
        self.H.add_hopping((((1, 1), (1, 1)), ((1, 0), (1, 0))),
                           z2pack.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           -t2,
                           phase=[1])

    # this test may produce false negatives due to small numerical differences
    def test_res1(self):
        self.createH(0.2, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False, num_strings=20, pickle_file=None)
        
        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49898072489988338, 0.50101927510011679], [0.49911000197719507, 0.50088999802280521], [0.49722298986367469, 0.50277701013632559], [0.49486518347716968, 0.50513481652283054], [0.49415538094779443, 0.50584461905220557], [0.49199011785557722, 0.50800988214442278], [0.48843360398185887, 0.51156639601814113], [0.48535722053500235, 0.5146427794649977], [0.48230706693702829, 0.51769293306297204], [0.47663140213115179, 0.52336859786884837], [0.46567875559479999, 0.53432124440520012], [0.45756734939154242, 0.54243265060845758], [0.44266403796708625, 0.55733596203291369], [0.41998125376083784, 0.58001874623916205], [0.38012546167189282, 0.61987453832810746], [0.32476304923871263, 0.67523695076128754], [0.25007332098742924, 0.74992667901257082], [0.16119121968635972, 0.83880878031364026], [0.078786548755048424, 0.92121345124495169], [0.00087998515257318446, 0.99912001484742674]], 'lambda_': [array([[ -9.99979493e-01-0.00631886j,  -9.86678140e-04-0.00033605j],
       [  9.86678140e-04-0.00033605j,  -9.99979493e-01+0.00631886j]]), array([[ -9.99984365e-01+0.00556568j,  -2.50217101e-04-0.00048056j],
       [  2.50217101e-04-0.00048056j,  -9.99984365e-01-0.00556568j]]), array([[ -9.99847779e-01 +1.74268385e-02j,
         -8.50572649e-04 +3.33385245e-06j],
       [  8.50572649e-04 +3.33385245e-06j,
         -9.99847779e-01 -1.74268385e-02j]]), array([[ -9.99479594e-01+0.03225093j,  -6.37722377e-04+0.00010678j],
       [  6.37722377e-04+0.00010678j,  -9.99479594e-01-0.03225093j]]), array([[ -9.99325793e-01+0.03670146j,  -3.56788461e-04-0.00091404j],
       [  3.56788461e-04-0.00091404j,  -9.99325793e-01-0.03670146j]]), array([[-0.99873383+0.05028463j, -0.00126188-0.0007687j ],
       [ 0.00126188-0.0007687j , -0.99873383-0.05028463j]]), array([[-0.99736042+0.07254906j, -0.00292617+0.0005127j ],
       [ 0.00292617+0.0005127j , -0.99736042-0.07254906j]]), array([[-0.99577068+0.0918449j ,  0.00228823-0.00016991j],
       [-0.00228823-0.00016991j, -0.99577068-0.0918449j ]]), array([[-0.9938272+0.11076504j, -0.0062017-0.00037125j],
       [ 0.0062017-0.00037125j, -0.9938272-0.11076504j]]), array([[-0.98923994+0.14595975j, -0.00968071-0.00252477j],
       [ 0.00968071-0.00252477j, -0.98923994-0.14595975j]]), array([[-0.97683821+0.21115312j, -0.03466017-0.00038029j],
       [ 0.03466017-0.00038029j, -0.97683821-0.21115312j]]), array([[-0.96466899+0.26313344j, -0.01320718-0.00030899j],
       [ 0.01320718-0.00030899j, -0.96466899-0.26313344j]]), array([[-0.93580785+0.35238482j, -0.00599266-0.00725852j],
       [ 0.00599266-0.00725852j, -0.93580785-0.35238482j]]), array([[-0.87624993+0.47731783j, -0.04528352-0.04799116j],
       [ 0.04528352-0.04799116j, -0.87624993-0.47731783j]]), array([[-0.72950803+0.67991055j, -0.06995809-0.02540769j],
       [ 0.06995809-0.02540769j, -0.72950803-0.67991055j]]), array([[-0.45266346+0.89153179j,  0.01629098+0.00121263j],
       [-0.01629098+0.00121263j, -0.45266346-0.89153179j]]), array([[-0.00046069+0.99382029j, -0.09684233-0.05424554j],
       [ 0.09684233-0.05424554j, -0.00046069-0.99382029j]]), array([[ 0.52949234+0.84598217j,  0.06284986+0.0013892j ],
       [-0.06284986+0.0013892j ,  0.52949234-0.84598217j]]), array([[ 0.87995423+0.4748248j , -0.00738638+0.01293848j],
       [ 0.00738638+0.01293848j,  0.87995423-0.4748248j ]]), array([[ 0.99998471+0.00399351j,  0.00340894-0.00173257j],
       [-0.00340894-0.00173257j,  0.99998471-0.00399351j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2204460492503131e-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res2(self):
        """ test pos_check=False """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            pos_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.75, 0.75], [0.75, 0.75]], 'lambda_': [array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.125, 0.125, 0.125, 0.25, 0.25]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res3(self):
        """ test gap_tol=None """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            gap_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49992364346411911, 0.50007635653588101], [0.49923530134149019, 0.50076469865850981], [0.49909053423353744, 0.50090946576646245], [0.49889954251085938, 0.50110045748914067], [0.49828291998573532, 0.50171708001426474], [0.49770351976341654, 0.50229648023658346], [0.49670586186328325, 0.50329413813671686], [0.49592391372432842, 0.50407608627567169], [0.49472221704087205, 0.50527778295912784], [0.49332636736198543, 0.50667363263801479], [0.49059786633725944, 0.50940213366274067], [0.48550828415225056, 0.51449171584774955], [0.47743291305581359, 0.52256708694418652], [0.46053575927853185, 0.53946424072146826], [0.41668226024356941, 0.58331773975643064], [0.32880134852745918, 0.67119865147254076], [0.22806395514487982, 0.77193604485512024], [0.14268105559347144, 0.85731894440652878], [0.068365337255629238, 0.93163466274437068], [0.0019102592505445403, 0.99808974074945545]], 'lambda_': [array([[ -9.99999885e-01 +4.77800276e-04j,
         -4.24900196e-05 -8.56197300e-06j],
       [  4.24900196e-05 -8.56197300e-06j,
         -9.99999885e-01 -4.77800276e-04j]]), array([[ -9.99988457e-01 +4.79986070e-03j,
         -2.11684842e-04 +4.36813150e-05j],
       [  2.11684842e-04 +4.36813150e-05j,
         -9.99988457e-01 -4.79986070e-03j]]), array([[ -9.99983673e-01+0.00569847j,   1.59966648e-04+0.00039399j],
       [ -1.59966648e-04+0.00039399j,  -9.99983673e-01-0.00569847j]]), array([[ -9.99976096e-01+0.00691334j,   4.69599300e-05-0.00010696j],
       [ -4.69599300e-05-0.00010696j,  -9.99976096e-01-0.00691334j]]), array([[ -9.99941802e-01+0.0107874j ,  -6.06773142e-05+0.00014306j],
       [  6.06773142e-05+0.00014306j,  -9.99941802e-01-0.0107874j ]]), array([[ -9.99895901e-01 +1.44269261e-02j,
         -2.18119936e-04 -6.24857384e-05j],
       [  2.18119936e-04 -6.24857384e-05j,
         -9.99895901e-01 -1.44269261e-02j]]), array([[ -9.99785811e-01+0.0206907j ,  -4.33630632e-04+0.00019873j],
       [  4.33630632e-04+0.00019873j,  -9.99785811e-01-0.0206907j ]]), array([[ -9.99672061e-01+0.02558112j,  -3.18070644e-04-0.00112918j],
       [  3.18070644e-04-0.00112918j,  -9.99672061e-01-0.02558112j]]), array([[ -9.99450215e-01 +3.31414358e-02j,
         -9.54553374e-04 -4.55047609e-05j],
       [  9.54553374e-04 -4.55047609e-05j,
         -9.99450215e-01 -3.31414358e-02j]]), array([[-0.9991210+0.04180638j, -0.0019666+0.00236521j],
       [ 0.0019666+0.00236521j, -0.9991210-0.04180638j]]), array([[-0.99825556+0.05894499j, -0.00199465+0.00271076j],
       [ 0.00199465+0.00271076j, -0.99825556-0.05894499j]]), array([[-0.99585744 +9.08617689e-02j, -0.00347954 +4.05882632e-06j],
       [ 0.00347954 +4.05882632e-06j, -0.99585744 -9.08617689e-02j]]), array([[-0.98996418+0.14127856j, -0.00276301+0.00191396j],
       [ 0.00276301+0.00191396j, -0.98996418-0.14127856j]]), array([[-0.96941483+0.24467154j,  0.01921981+0.00115118j],
       [-0.01921981+0.00115118j, -0.96941483-0.24467154j]]), array([[-0.86607439+0.49683437j, -0.04816862-0.0273961j ],
       [ 0.04816862-0.0273961j , -0.86607439-0.49683437j]]), array([[-0.47514030+0.879763j  ,  0.01218707+0.01049881j],
       [-0.01218707+0.01049881j, -0.47514030-0.879763j  ]]), array([[ 0.13739227+0.98738098j,  0.02008000+0.07615085j],
       [-0.02008000+0.07615085j,  0.13739227-0.98738098j]]), array([[ 0.62435443+0.7778084j ,  0.07167381-0.00764922j],
       [-0.07167381-0.00764922j,  0.62435443-0.7778084j ]]), array([[  9.09152382e-01+0.41646297j,  -2.21912421e-04-0.00070286j],
       [  2.21912421e-04-0.00070286j,   9.09152382e-01-0.41646297j]]), array([[  9.99927971e-01+0.01087037j,   7.03997332e-04-0.00503913j],
       [ -7.03997332e-04-0.00503913j,   9.99927971e-01-0.01087037j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.50000000000000011, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res4(self):
        """ test move_tol=None """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                          num_strings=20,
                          pickle_file=None,
                          move_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49992364346411911, 0.50007635653588101], [0.49923530134149019, 0.50076469865850981], [0.49909053423353744, 0.50090946576646245], [0.49889954251085938, 0.50110045748914067], [0.49828291998573532, 0.50171708001426474], [0.49770351976341654, 0.50229648023658346], [0.49670586186328325, 0.50329413813671686], [0.49592391372432842, 0.50407608627567169], [0.49472221704087205, 0.50527778295912784], [0.49332636736198543, 0.50667363263801479], [0.49059786633725944, 0.50940213366274067], [0.48550828415225056, 0.51449171584774955], [0.47743291305581359, 0.52256708694418652], [0.46053575927853185, 0.53946424072146826], [0.41668226024356941, 0.58331773975643064], [0.32880134852745918, 0.67119865147254076], [0.22806395514487982, 0.77193604485512024], [0.14268105559347144, 0.85731894440652878], [0.068365337255629238, 0.93163466274437068], [0.0019102592505445403, 0.99808974074945545]], 'lambda_': [array([[ -9.99999885e-01 +4.77800276e-04j,
         -4.24900196e-05 -8.56197300e-06j],
       [  4.24900196e-05 -8.56197300e-06j,
         -9.99999885e-01 -4.77800276e-04j]]), array([[ -9.99988457e-01 +4.79986070e-03j,
         -2.11684842e-04 +4.36813150e-05j],
       [  2.11684842e-04 +4.36813150e-05j,
         -9.99988457e-01 -4.79986070e-03j]]), array([[ -9.99983673e-01+0.00569847j,   1.59966648e-04+0.00039399j],
       [ -1.59966648e-04+0.00039399j,  -9.99983673e-01-0.00569847j]]), array([[ -9.99976096e-01+0.00691334j,   4.69599300e-05-0.00010696j],
       [ -4.69599300e-05-0.00010696j,  -9.99976096e-01-0.00691334j]]), array([[ -9.99941802e-01+0.0107874j ,  -6.06773142e-05+0.00014306j],
       [  6.06773142e-05+0.00014306j,  -9.99941802e-01-0.0107874j ]]), array([[ -9.99895901e-01 +1.44269261e-02j,
         -2.18119936e-04 -6.24857384e-05j],
       [  2.18119936e-04 -6.24857384e-05j,
         -9.99895901e-01 -1.44269261e-02j]]), array([[ -9.99785811e-01+0.0206907j ,  -4.33630632e-04+0.00019873j],
       [  4.33630632e-04+0.00019873j,  -9.99785811e-01-0.0206907j ]]), array([[ -9.99672061e-01+0.02558112j,  -3.18070644e-04-0.00112918j],
       [  3.18070644e-04-0.00112918j,  -9.99672061e-01-0.02558112j]]), array([[ -9.99450215e-01 +3.31414358e-02j,
         -9.54553374e-04 -4.55047609e-05j],
       [  9.54553374e-04 -4.55047609e-05j,
         -9.99450215e-01 -3.31414358e-02j]]), array([[-0.9991210+0.04180638j, -0.0019666+0.00236521j],
       [ 0.0019666+0.00236521j, -0.9991210-0.04180638j]]), array([[-0.99825556+0.05894499j, -0.00199465+0.00271076j],
       [ 0.00199465+0.00271076j, -0.99825556-0.05894499j]]), array([[-0.99585744 +9.08617689e-02j, -0.00347954 +4.05882632e-06j],
       [ 0.00347954 +4.05882632e-06j, -0.99585744 -9.08617689e-02j]]), array([[-0.98996418+0.14127856j, -0.00276301+0.00191396j],
       [ 0.00276301+0.00191396j, -0.98996418-0.14127856j]]), array([[-0.96941483+0.24467154j,  0.01921981+0.00115118j],
       [-0.01921981+0.00115118j, -0.96941483-0.24467154j]]), array([[-0.86607439+0.49683437j, -0.04816862-0.0273961j ],
       [ 0.04816862-0.0273961j , -0.86607439-0.49683437j]]), array([[-0.47514030+0.879763j  ,  0.01218707+0.01049881j],
       [-0.01218707+0.01049881j, -0.47514030-0.879763j  ]]), array([[ 0.13739227+0.98738098j,  0.02008000+0.07615085j],
       [-0.02008000+0.07615085j,  0.13739227-0.98738098j]]), array([[ 0.62435443+0.7778084j ,  0.07167381-0.00764922j],
       [-0.07167381-0.00764922j,  0.62435443-0.7778084j ]]), array([[  9.09152382e-01+0.41646297j,  -2.21912421e-04-0.00070286j],
       [  2.21912421e-04-0.00070286j,   9.09152382e-01-0.41646297j]]), array([[  9.99927971e-01+0.01087037j,   7.03997332e-04-0.00503913j],
       [ -7.03997332e-04-0.00503913j,   9.99927971e-01-0.01087037j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.50000000000000011, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res5(self):
        """ test gap_tol=None and move_tol=None"""
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            gap_tol=None,
                            move_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49992364346411911, 0.50007635653588101], [0.49923530134149019, 0.50076469865850981], [0.49909053423353744, 0.50090946576646245], [0.49889954251085938, 0.50110045748914067], [0.49828291998573532, 0.50171708001426474], [0.49770351976341654, 0.50229648023658346], [0.49670586186328325, 0.50329413813671686], [0.49592391372432842, 0.50407608627567169], [0.49472221704087205, 0.50527778295912784], [0.49332636736198543, 0.50667363263801479], [0.49059786633725944, 0.50940213366274067], [0.48550828415225056, 0.51449171584774955], [0.47743291305581359, 0.52256708694418652], [0.46053575927853185, 0.53946424072146826], [0.41668226024356941, 0.58331773975643064], [0.32880134852745918, 0.67119865147254076], [0.22806395514487982, 0.77193604485512024], [0.14268105559347144, 0.85731894440652878], [0.068365337255629238, 0.93163466274437068], [0.0019102592505445403, 0.99808974074945545]], 'lambda_': [array([[ -9.99999885e-01 +4.77800276e-04j,
         -4.24900196e-05 -8.56197300e-06j],
       [  4.24900196e-05 -8.56197300e-06j,
         -9.99999885e-01 -4.77800276e-04j]]), array([[ -9.99988457e-01 +4.79986070e-03j,
         -2.11684842e-04 +4.36813150e-05j],
       [  2.11684842e-04 +4.36813150e-05j,
         -9.99988457e-01 -4.79986070e-03j]]), array([[ -9.99983673e-01+0.00569847j,   1.59966648e-04+0.00039399j],
       [ -1.59966648e-04+0.00039399j,  -9.99983673e-01-0.00569847j]]), array([[ -9.99976096e-01+0.00691334j,   4.69599300e-05-0.00010696j],
       [ -4.69599300e-05-0.00010696j,  -9.99976096e-01-0.00691334j]]), array([[ -9.99941802e-01+0.0107874j ,  -6.06773142e-05+0.00014306j],
       [  6.06773142e-05+0.00014306j,  -9.99941802e-01-0.0107874j ]]), array([[ -9.99895901e-01 +1.44269261e-02j,
         -2.18119936e-04 -6.24857384e-05j],
       [  2.18119936e-04 -6.24857384e-05j,
         -9.99895901e-01 -1.44269261e-02j]]), array([[ -9.99785811e-01+0.0206907j ,  -4.33630632e-04+0.00019873j],
       [  4.33630632e-04+0.00019873j,  -9.99785811e-01-0.0206907j ]]), array([[ -9.99672061e-01+0.02558112j,  -3.18070644e-04-0.00112918j],
       [  3.18070644e-04-0.00112918j,  -9.99672061e-01-0.02558112j]]), array([[ -9.99450215e-01 +3.31414358e-02j,
         -9.54553374e-04 -4.55047609e-05j],
       [  9.54553374e-04 -4.55047609e-05j,
         -9.99450215e-01 -3.31414358e-02j]]), array([[-0.9991210+0.04180638j, -0.0019666+0.00236521j],
       [ 0.0019666+0.00236521j, -0.9991210-0.04180638j]]), array([[-0.99825556+0.05894499j, -0.00199465+0.00271076j],
       [ 0.00199465+0.00271076j, -0.99825556-0.05894499j]]), array([[-0.99585744 +9.08617689e-02j, -0.00347954 +4.05882632e-06j],
       [ 0.00347954 +4.05882632e-06j, -0.99585744 -9.08617689e-02j]]), array([[-0.98996418+0.14127856j, -0.00276301+0.00191396j],
       [ 0.00276301+0.00191396j, -0.98996418-0.14127856j]]), array([[-0.96941483+0.24467154j,  0.01921981+0.00115118j],
       [-0.01921981+0.00115118j, -0.96941483-0.24467154j]]), array([[-0.86607439+0.49683437j, -0.04816862-0.0273961j ],
       [ 0.04816862-0.0273961j , -0.86607439-0.49683437j]]), array([[-0.47514030+0.879763j  ,  0.01218707+0.01049881j],
       [-0.01218707+0.01049881j, -0.47514030-0.879763j  ]]), array([[ 0.13739227+0.98738098j,  0.02008000+0.07615085j],
       [-0.02008000+0.07615085j,  0.13739227-0.98738098j]]), array([[ 0.62435443+0.7778084j ,  0.07167381-0.00764922j],
       [-0.07167381-0.00764922j,  0.62435443-0.7778084j ]]), array([[  9.09152382e-01+0.41646297j,  -2.21912421e-04-0.00070286j],
       [  2.21912421e-04-0.00070286j,   9.09152382e-01-0.41646297j]]), array([[  9.99927971e-01+0.01087037j,   7.03997332e-04-0.00503913j],
       [ -7.03997332e-04-0.00503913j,   9.99927971e-01-0.01087037j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.50000000000000011, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_warning(self):
        """ test the warning that is given when string_vec != None"""
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter('always')
            tb_surface = tb_system.surface(lambda kx: [kx / 2, 0, 0], [0, 1, 0])
            assert len(w) == 1
            assert w[-1].category == DeprecationWarning
            assert "string_vec" in str(w[-1].message)

    def test_saveload(self):
        self.createH(0.1, 0.3)
        tb_system = z2pack.tb.System(self.H)
        surface1 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file='samples/tb_pickle.txt')
        surface2 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file='samples/tb_pickle.txt')
        surface1.wcc_calc(verbose=False)
        surface2.load()
        self.assertFullAlmostEqual(surface1.get_res(), surface2.get_res())

    def testkwargcheck1(self):
        """ test kwarg check on wcc_calc """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        self.assertRaises(
            TypeError,
            tb_surface.wcc_calc,
            invalid_kwarg = 3)

    def testkwargcheck2(self):
        """ test kwarg check on __init__ """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        self.assertRaises(
            TypeError,
            tb_system.surface,
            1, 2, 0, invalid_kwarg = 3)

if __name__ == "__main__":
    unittest.main()

#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Author:  Dominik Gresch <greschd@gmx.ch>
# Date:    15.10.2014 10:22:43 CEST
# File:    tbexample.py

import sys
sys.path.append('../')
import z2pack

from common import *

import types
import unittest


class TbExampleTestCase(CommonTestCase):

    def createH(self, t1, t2):

        self.H = z2pack.tb.Hamilton()

        # create the two atoms
        self.H.add_atom(([1, 1], 1), [0, 0, 0])
        self.H.add_atom(([-1, -1], 1), [0.5, 0.5, 0])

        # add hopping between different atoms
        self.H.add_hopping(((0, 0), (1, 1)),
                           z2pack.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, -1j, 1j, -1])
        self.H.add_hopping(((0, 1), (1, 0)),
                           z2pack.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, 1j, -1j, -1])

        # add hopping between neighbouring orbitals of the same type
        self.H.add_hopping((((0, 0), (0, 0)), ((0, 1), (0, 1))),
                           z2pack.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           t2,
                           phase=[1])
        self.H.add_hopping((((1, 1), (1, 1)), ((1, 0), (1, 0))),
                           z2pack.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           -t2,
                           phase=[1])

    # this test may produce false negatives due to small numerical differences
    def test_res1(self):
        self.createH(0.2, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(1, 2, 0)
        tb_plane.wcc_calc(verbose=False, num_strings=20, use_pickle=False)
        
        res = ([0.0, 0.026315789473684209, 0.052631578947368418, 0.078947368421052627, 0.10526315789473684, 0.13157894736842105, 0.15789473684210525, 0.18421052631578946, 0.21052631578947367, 0.23684210526315788, 0.26315789473684209, 0.28947368421052633, 0.31578947368421051, 0.34210526315789469, 0.36842105263157893, 0.39473684210526316, 0.42105263157894735, 0.44736842105263153, 0.47368421052631576, 0.5], [[0.49983964546467036, 0.50016035453532992], [0.49890749383729088, 0.50109250616270928], [0.49641395036486252, 0.50358604963513764], [0.49554883941587446, 0.50445116058412554], [0.49652567629394373, 0.5034743237060566], [0.49035854882904767, 0.50964145117095228], [0.48929271594465651, 0.51070728405534349], [0.48629705364229231, 0.51370294635770786], [0.48121568261281716, 0.51878431738718289], [0.47656990584661874, 0.52343009415338138], [0.46885612423665834, 0.53114387576334154], [0.45994586240888752, 0.54005413759111265], [0.44382468776376022, 0.55617531223623984], [0.42061785313061933, 0.57938214686938083], [0.38301143221824507, 0.61698856778175493], [0.32658906586480302, 0.67341093413519704], [0.24761278897396316, 0.7523872110260369], [0.15963543249220546, 0.84036456750779442], [0.081605641698089357, 0.91839435830191074], [0.0038664353524984706, 0.99613356464750147]], [0.0, 0.0, 0.0, 0.0, 2.2204460492503131e-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.49999999999999994, 0.5, 0.5])

        self.assertContainerAlmostEqual(tb_plane.get_res(), res)

    def test_res2(self):
        """ test no_iter=True """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(1, 2, 0)
        tb_plane.wcc_calc(verbose=False,
                          num_strings=20,
                          use_pickle=False,
                          no_iter=True)

        res = ([0.0, 0.026315789473684209, 0.052631578947368418, 0.078947368421052627, 0.10526315789473684, 0.13157894736842105, 0.15789473684210525, 0.18421052631578946, 0.21052631578947367, 0.23684210526315788, 0.26315789473684209, 0.28947368421052633, 0.31578947368421051, 0.34210526315789469, 0.36842105263157893, 0.39473684210526316, 0.42105263157894735, 0.44736842105263153, 0.47368421052631576, 0.5], [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.21428571428571419, 0.21428571428571419, 0.21428571428571419, 0.21428571428571419, 0.21428571428571419])

        self.assertContainerAlmostEqual(tb_plane.get_res(), res)

    def test_res3(self):
        """ test no_neighbour_check=True """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(1, 2, 0)
        tb_plane.wcc_calc(verbose=False,
                          num_strings=20,
                          use_pickle=False,
                          no_neighbour_check=True)

        res = ([0.0, 0.026315789473684209, 0.052631578947368418, 0.078947368421052627, 0.10526315789473684, 0.13157894736842105, 0.15789473684210525, 0.18421052631578946, 0.21052631578947367, 0.23684210526315788, 0.26315789473684209, 0.28947368421052633, 0.31578947368421051, 0.34210526315789469, 0.36842105263157893, 0.39473684210526316, 0.42105263157894735, 0.44736842105263153, 0.47368421052631576, 0.5], [[0.49996369258458911, 0.50003630741541083], [0.49969937950042137, 0.5003006204995788], [0.49921787497304743, 0.50078212502695296], [0.49870591461585301, 0.50129408538414699], [0.49847531395097933, 0.50152468604902101], [0.49764676757501669, 0.50235323242498353], [0.49681898534071861, 0.50318101465928156], [0.49599416659067369, 0.50400583340932625], [0.49472217792911855, 0.50527782207088145], [0.49276712834767228, 0.50723287165232778], [0.49022033200632836, 0.5097796679936718], [0.48587842661714503, 0.51412157338285491], [0.47823278374021649, 0.52176721625978362], [0.46251894588556092, 0.53748105411443925], [0.41753936610692016, 0.58246063389307956], [0.32650477740011102, 0.67349522259988914], [0.22465846442415066, 0.77534153557584962], [0.14764583792827177, 0.85235416207172832], [0.069572386836641423, 0.93042761316335876], [0.00064245928837270067, 0.99935754071162741]], [0.0, 0.0, 2.2204460492503131e-16, 0.0, 2.2204460492503131e-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.99999999999999989, 0.0, 0.50000000000000022, 0.5, 0.50000000000000011, 0.50000000000000011])

        self.assertContainerAlmostEqual(tb_plane.get_res(), res)

    def testkwargcheck1(self):
        """ test kwarg check on wcc_calc """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(1, 2, 0)
        self.assertRaises(
            TypeError,
            tb_plane.wcc_calc,
            invalid_kwarg = 3)

    def testkwargcheck2(self):
        """ test kwarg check on __init__ """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        self.assertRaises(
            TypeError,
            tb_system.plane,
            1, 2, 0, invalid_kwarg = 3)

    # this test may produce false negatives due to small numerical differences
    def test_res1_v2(self):
        self.createH(0.2, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(plane_edge_start=[0, 0, 0], plane_edge_end=[1, 0, 0], string_vec=[0, 1, 0])
        tb_plane.wcc_calc(verbose=False, num_strings=20, use_pickle=False)
        
        res = ([0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], [[0.49983964546467036, 0.50016035453532992], [0.49641395036486252, 0.50358604963513764], [0.49652567629394373, 0.5034743237060566], [0.48929271594465651, 0.51070728405534349], [0.48121568261281716, 0.51878431738718289], [0.46885612423665834, 0.53114387576334154], [0.44382468776376022, 0.55617531223623984], [0.38301143221824507, 0.61698856778175493], [0.24761278897396316, 0.7523872110260369], [0.081605641698089357, 0.91839435830191074], [0.081626412280110472, 0.91837358771988975], [0.24551244546658102, 0.7544875545334192], [0.37818882309920948, 0.6218111769007908], [0.44448265320552593, 0.55551734679447429], [0.46852472488132335, 0.53147527511867665], [0.4815223617995868, 0.51847763820041326], [0.48880247564436458, 0.51119752435563548], [0.49133310204525971, 0.5086668979547404], [0.49731451892976225, 0.50268548107023769], [0.49970883781246184, 0.50029116218753811]], [0.0, 0.0, 2.2204460492503131e-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.50000000000000011, 0.50000000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

        self.assertContainerAlmostEqual(tb_plane.get_res(), res)

    def test_res2_v2(self):
        """ test no_iter=True """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(plane_edge_start=[0, 0, 0], plane_edge_end=[1, 0, 0], string_vec=[0, 1, 0])
        tb_plane.wcc_calc(verbose=False,
                          num_strings=20,
                          use_pickle=False,
                          no_iter=True)

        res = ([0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.21428571428571419, 0.21428571428571419, 0.21428571428571419, 0.21428571428571419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

        self.assertContainerAlmostEqual(tb_plane.get_res(), res)

    def test_res3_v2(self):
        """ test no_neighbour_check=True """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(plane_edge_start=[0, 0, 0], plane_edge_end=[1, 0, 0], string_vec=[0, 1, 0])
        tb_plane.wcc_calc(verbose=False,
                          num_strings=20,
                          use_pickle=False,
                          no_neighbour_check=True)

        res = ([0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], [[0.49996369258458911, 0.50003630741541083], [0.49921787497304743, 0.50078212502695296], [0.49847531395097933, 0.50152468604902101], [0.49681898534071861, 0.50318101465928156], [0.49472217792911855, 0.50527782207088145], [0.49022033200632836, 0.5097796679936718], [0.47823278374021649, 0.52176721625978362], [0.41753936610692016, 0.58246063389307956], [0.22465846442415066, 0.77534153557584962], [0.069572386836641423, 0.93042761316335876], [0.070640757883293409, 0.92935924211670673], [0.22741272684369099, 0.77258727315630904], [0.4177554087429069, 0.58224459125709283], [0.47917835273253484, 0.52082164726746505], [0.49012578802023254, 0.50987421197976768], [0.49482291422743158, 0.50517708577256859], [0.49690235179204773, 0.50309764820795233], [0.49813317792404294, 0.50186682207595723], [0.49929772405232842, 0.5007022759476718], [0.49999165765911974, 0.50000834234088032]], [0.0, 2.2204460492503131e-16, 2.2204460492503131e-16, 0.0, 0.0, 0.0, 0.0, 0.99999999999999989, 0.50000000000000022, 0.50000000000000011, 0.50000000000000011, 0.5, 0.99999999999999989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

        self.assertContainerAlmostEqual(tb_plane.get_res(), res)

    def testkwargcheck1_v2(self):
        """ test kwarg check on wcc_calc """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(plane_edge_start=[0, 0, 0], plane_edge_end=[1, 0, 0], string_vec=[0, 1, 0])
        self.assertRaises(
            TypeError,
            tb_plane.wcc_calc,
            invalid_kwarg = 3)

    def testkwargcheck2_v2(self):
        """ test kwarg check on __init__ """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        self.assertRaises(
            TypeError,
            tb_system.plane,
            plane_edge_start=[0, 0, 0], plane_edge_end=[1, 0, 0], string_vec=[0, 1, 0], invalid_kwarg = 3)


if __name__ == "__main__":
    unittest.main()

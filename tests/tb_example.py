#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Author:  Dominik Gresch <greschd@gmx.ch>
# Date:    15.10.2014 10:22:43 CEST
# File:    tb_example.py

from common import *

import os
import types
import shutil

class TbExampleTestCase(BuildDirTestCase):

    def createH(self, t1, t2):

        builder = z2pack.em.tb.Builder()

        # create the two atoms
        builder.add_atom([1, 1], [0, 0, 0], 1)
        builder.add_atom([-1, -1], [0.5, 0.5, 0], 1)

        # add hopping between different atoms
        builder.add_hopping(((0, 0), (1, 1)),
                           z2pack.em.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, -1j, 1j, -1])
        builder.add_hopping(((0, 1), (1, 0)),
                           z2pack.em.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, 1j, -1j, -1])

        # add hopping between neighbouring orbitals of the same type
        builder.add_hopping((((0, 0), (0, 0)), ((0, 1), (0, 1))),
                           z2pack.em.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           t2,
                           phase=[1])
        builder.add_hopping((((1, 1), (1, 1)), ((1, 0), (1, 0))),
                           z2pack.em.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           -t2,
                           phase=[1])
        self.model = builder.create()

    # this test may produce false negatives due to small numerical differences
    def test_res1(self):
        self.createH(0.2, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False, num_strings=20, pickle_file=None)
        
        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49982704261248845, 0.50017295738751177], [0.49906200117972299, 0.50093799882027712], [0.49723224703413321, 0.50276775296586684], [0.4950710007678723, 0.50492899923212797], [0.49385314383458445, 0.50614685616541555], [0.49073522374099576, 0.50926477625900435], [0.48924265806873096, 0.5107573419312692], [0.48569994131876693, 0.51430005868123319], [0.48186110971820845, 0.51813889028179161], [0.47705389340116455, 0.52294610659883545], [0.46965802121424005, 0.53034197878576017], [0.45723091224991341, 0.54276908775008681], [0.44370423639954482, 0.55629576360045518], [0.41981545361894168, 0.58018454638105843], [0.38151302848522223, 0.61848697151477805], [0.32348551413141252, 0.67651448586858742], [0.24806463590220712, 0.75193536409779316], [0.1627209257664039, 0.83727907423359627], [0.081909265459767691, 0.91809073454023227], [0.00071823427682236765, 0.99928176572317762]], 'lambda_': [array([[ -9.99999410e-01+0.00022297j,  -3.92998224e-04-0.00098833j],
       [  3.92998224e-04-0.00098833j,  -9.99999410e-01-0.00022297j]]), array([[ -9.99982633e-01+0.00585894j,  -2.29896963e-04+0.0005953j ],
       [  2.29896963e-04+0.0005953j ,  -9.99982633e-01-0.00585894j]]), array([[ -9.99848792e-01+0.01723884j,   2.25073302e-04+0.00227244j],
       [ -2.25073302e-04+0.00227244j,  -9.99848792e-01-0.01723884j]]), array([[ -9.99520474e-01 +3.09555718e-02j,
         -7.58429942e-04 +1.52454803e-05j],
       [  7.58429942e-04 +1.52454803e-05j,
         -9.99520474e-01 -3.09555718e-02j]]), array([[ -9.99254270e-01 +3.86119849e-02j,
         -1.32836695e-04 +4.11810076e-05j],
       [  1.32836695e-04 +4.11810076e-05j,
         -9.99254270e-01 -3.86119849e-02j]]), array([[-0.99830614+0.05779781j, -0.00402386-0.00529795j],
       [ 0.00402386-0.00529795j, -0.99830614-0.05779781j]]), array([[ -9.97716640e-01+0.06750697j,  -8.21580732e-04-0.00190794j],
       [  8.21580732e-04-0.00190794j,  -9.97716640e-01-0.06750697j]]), array([[-0.99596621+0.08962972j,  0.00421840+0.00015716j],
       [-0.00421840+0.00015716j, -0.99596621-0.08962972j]]), array([[-0.99351245+0.11371625j, -0.00126908+0.00015986j],
       [ 0.00126908+0.00015986j, -0.99351245-0.11371625j]]), array([[-0.98962483+0.14364735j,  0.00280789+0.00050696j],
       [-0.00280789+0.00050696j, -0.98962483-0.14364735j]]), array([[-0.98188235+0.18810895j, -0.02042742-0.01023649j],
       [ 0.02042742-0.01023649j, -0.98188235-0.18810895j]]), array([[-0.96410990+0.26515677j, -0.01345327+0.00172975j],
       [ 0.01345327+0.00172975j, -0.96410990-0.26515677j]]), array([[-0.93809177+0.34471183j, -0.03398707-0.00156759j],
       [ 0.03398707-0.00156759j, -0.93809177-0.34471183j]]), array([[-0.87574748+0.48113925j, -0.03733171+0.01333128j],
       [ 0.03733171+0.01333128j, -0.87574748-0.48113925j]]), array([[-0.73544333+0.67438374j,  0.06070515-0.02538832j],
       [-0.06070515-0.02538832j, -0.73544333-0.67438374j]]), array([[-0.44549144+0.89507237j,  0.01933185+0.00301951j],
       [-0.01933185+0.00301951j, -0.44549144-0.89507237j]]), array([[ 0.01215995+0.99008096j,  0.03850031+0.13457176j],
       [-0.03850031+0.13457176j,  0.01215995-0.99008096j]]), array([[  5.21314497e-01 +8.53364425e-01j,
         -3.58250926e-04 +4.74045031e-04j],
       [  3.58250926e-04 +4.74045031e-04j,
          5.21314497e-01 -8.53364425e-01j]]), array([[ 0.87046452+0.49208108j, -0.00409750-0.011443j  ],
       [ 0.00409750-0.011443j  ,  0.87046452-0.49208108j]]), array([[  9.99989817e-01-0.00285869j,   6.56734751e-04+0.00342955j],
       [ -6.56734751e-04+0.00342955j,   9.99989817e-01+0.00285869j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.50000000000000022, 0.5, 0.49999999999999994, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res2(self):
        """ test pos_check=False """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            pos_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.75, 0.75], [0.75, 0.75]], 'lambda_': [array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.125, 0.125, 0.125, 0.25, 0.25]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res3(self):
        """ test gap_tol=None """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            gap_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49995426754411426, 0.50004573245588579], [0.49983140749678912, 0.50016859250321111], [0.4991806690520732, 0.50081933094792697], [0.49840267398349436, 0.50159732601650586], [0.4982607642271481, 0.50173923577285207], [0.49805780279390627, 0.5019421972060939], [0.49656444666732097, 0.5034355533326792], [0.49589707761446805, 0.504102922385532], [0.49488381967459166, 0.50511618032540839], [0.49318999621241477, 0.50681000378758512], [0.48949408420771795, 0.51050591579228222], [0.48548036661221078, 0.5145196333877895], [0.47744628363240271, 0.52255371636759751], [0.4626987930942168, 0.5373012069057832], [0.42516128579800322, 0.57483871420199661], [0.32473039201237713, 0.67526960798762303], [0.22789001604668987, 0.77210998395331021], [0.14332915581102823, 0.85667084418897188], [0.067288303776433356, 0.93271169622356664], [0.00020876278448664714, 0.99979123721551355]], 'lambda_': [array([[ -9.99999959e-01 +2.71301311e-04j,
         -2.15549692e-05 -9.21868394e-05j],
       [  2.15549692e-05 -9.21868394e-05j,
         -9.99999959e-01 -2.71301311e-04j]]), array([[ -9.99999439e-01+0.00105395j,   1.10850810e-05+0.00010573j],
       [ -1.10850810e-05+0.00010573j,  -9.99999439e-01-0.00105395j]]), array([[ -9.99986749e-01 +5.14729660e-03j,
         -3.47701454e-05 +7.66994609e-05j],
       [  3.47701454e-05 +7.66994609e-05j,
         -9.99986749e-01 -5.14729660e-03j]]), array([[ -9.99949637e-01+0.01000466j,   1.20456209e-04-0.00078491j],
       [ -1.20456209e-04-0.00078491j,  -9.99949637e-01-0.01000466j]]), array([[ -9.99940291e-01 +1.09277229e-02j,
         -2.16400942e-06 -1.05451394e-06j],
       [  2.16400942e-06 -1.05451394e-06j,
         -9.99940291e-01 -1.09277229e-02j]]), array([[ -9.99925542e-01+0.01219482j,  -2.45309663e-04-0.00036945j],
       [  2.45309663e-04-0.00036945j,  -9.99925542e-01-0.01219482j]]), array([[ -9.99767027e-01+0.02157494j,  -6.34766841e-04-0.0001066j ],
       [  6.34766841e-04-0.0001066j ,  -9.99767027e-01-0.02157494j]]), array([[ -9.99667729e-01+0.02577214j,  -1.98713018e-04-0.00043411j],
       [  1.98713018e-04-0.00043411j,  -9.99667729e-01-0.02577214j]]), array([[ -9.99483365e-01+0.0321329j,  -6.80302893e-04+0.0001331j],
       [  6.80302893e-04+0.0001331j,  -9.99483365e-01-0.0321329j]]), array([[ -9.99084711e-01 +4.27740028e-02j,
          3.48214968e-04 +5.86103235e-05j],
       [ -3.48214968e-04 +5.86103235e-05j,
         -9.99084711e-01 -4.27740028e-02j]]), array([[-0.99782209+0.06593609j, -0.00157577-0.00101274j],
       [ 0.00157577-0.00101274j, -0.99782209-0.06593609j]]), array([[-0.99584147 +9.10857707e-02j, -0.00177253 +8.11427311e-05j],
       [ 0.00177253 +8.11427311e-05j, -0.99584147 -9.10857707e-02j]]), array([[-0.98997605+0.14096949j,  0.00845299+0.00189205j],
       [-0.00845299+0.00189205j, -0.98997605-0.14096949j]]), array([[ -9.72660748e-01+0.23214282j,  -8.43922855e-04+0.00633004j],
       [  8.43922855e-04+0.00633004j,  -9.72660748e-01-0.23214282j]]), array([[-0.89146614+0.45030505j,  0.03833440+0.03231041j],
       [-0.03833440+0.03231041j, -0.89146614-0.45030505j]]), array([[-0.45248049+0.89173905j,  0.00704374-0.00364079j],
       [-0.00704374-0.00364079j, -0.45248049-0.89173905j]]), array([[ 0.13847472+0.98678817j, -0.03885392-0.07459385j],
       [ 0.03885392-0.07459385j,  0.13847472-0.98678817j]]), array([[  6.21168351e-01 +7.83676971e-01j,
         -2.61072193e-04 +4.65776655e-04j],
       [  2.61072193e-04 +4.65776655e-04j,
          6.21168351e-01 -7.83676971e-01j]]), array([[ 0.91194984+0.41013409j, -0.00417017-0.0109605j ],
       [ 0.00417017-0.0109605j ,  0.91194984-0.41013409j]]), array([[  9.99999140e-01+0.00097933j,   5.87986272e-05-0.00087063j],
       [ -5.87986272e-05-0.00087063j,   9.99999140e-01-0.00097933j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.99999999999999989, 0.0, 0.5, 0.5, 0.5, 0.50000000000000011]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res4(self):
        """ test move_tol=None """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                          num_strings=20,
                          pickle_file=None,
                          move_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49995426754411426, 0.50004573245588579], [0.49983140749678912, 0.50016859250321111], [0.4991806690520732, 0.50081933094792697], [0.49840267398349436, 0.50159732601650586], [0.4982607642271481, 0.50173923577285207], [0.49805780279390627, 0.5019421972060939], [0.49656444666732097, 0.5034355533326792], [0.49589707761446805, 0.504102922385532], [0.49488381967459166, 0.50511618032540839], [0.49318999621241477, 0.50681000378758512], [0.48949408420771795, 0.51050591579228222], [0.48548036661221078, 0.5145196333877895], [0.47744628363240271, 0.52255371636759751], [0.4626987930942168, 0.5373012069057832], [0.42516128579800322, 0.57483871420199661], [0.32473039201237713, 0.67526960798762303], [0.22789001604668987, 0.77210998395331021], [0.14332915581102823, 0.85667084418897188], [0.067288303776433356, 0.93271169622356664], [0.00020876278448664714, 0.99979123721551355]], 'lambda_': [array([[ -9.99999959e-01 +2.71301311e-04j,
         -2.15549692e-05 -9.21868394e-05j],
       [  2.15549692e-05 -9.21868394e-05j,
         -9.99999959e-01 -2.71301311e-04j]]), array([[ -9.99999439e-01+0.00105395j,   1.10850810e-05+0.00010573j],
       [ -1.10850810e-05+0.00010573j,  -9.99999439e-01-0.00105395j]]), array([[ -9.99986749e-01 +5.14729660e-03j,
         -3.47701454e-05 +7.66994609e-05j],
       [  3.47701454e-05 +7.66994609e-05j,
         -9.99986749e-01 -5.14729660e-03j]]), array([[ -9.99949637e-01+0.01000466j,   1.20456209e-04-0.00078491j],
       [ -1.20456209e-04-0.00078491j,  -9.99949637e-01-0.01000466j]]), array([[ -9.99940291e-01 +1.09277229e-02j,
         -2.16400942e-06 -1.05451394e-06j],
       [  2.16400942e-06 -1.05451394e-06j,
         -9.99940291e-01 -1.09277229e-02j]]), array([[ -9.99925542e-01+0.01219482j,  -2.45309663e-04-0.00036945j],
       [  2.45309663e-04-0.00036945j,  -9.99925542e-01-0.01219482j]]), array([[ -9.99767027e-01+0.02157494j,  -6.34766841e-04-0.0001066j ],
       [  6.34766841e-04-0.0001066j ,  -9.99767027e-01-0.02157494j]]), array([[ -9.99667729e-01+0.02577214j,  -1.98713018e-04-0.00043411j],
       [  1.98713018e-04-0.00043411j,  -9.99667729e-01-0.02577214j]]), array([[ -9.99483365e-01+0.0321329j,  -6.80302893e-04+0.0001331j],
       [  6.80302893e-04+0.0001331j,  -9.99483365e-01-0.0321329j]]), array([[ -9.99084711e-01 +4.27740028e-02j,
          3.48214968e-04 +5.86103235e-05j],
       [ -3.48214968e-04 +5.86103235e-05j,
         -9.99084711e-01 -4.27740028e-02j]]), array([[-0.99782209+0.06593609j, -0.00157577-0.00101274j],
       [ 0.00157577-0.00101274j, -0.99782209-0.06593609j]]), array([[-0.99584147 +9.10857707e-02j, -0.00177253 +8.11427311e-05j],
       [ 0.00177253 +8.11427311e-05j, -0.99584147 -9.10857707e-02j]]), array([[-0.98997605+0.14096949j,  0.00845299+0.00189205j],
       [-0.00845299+0.00189205j, -0.98997605-0.14096949j]]), array([[ -9.72660748e-01+0.23214282j,  -8.43922855e-04+0.00633004j],
       [  8.43922855e-04+0.00633004j,  -9.72660748e-01-0.23214282j]]), array([[-0.89146614+0.45030505j,  0.03833440+0.03231041j],
       [-0.03833440+0.03231041j, -0.89146614-0.45030505j]]), array([[-0.45248049+0.89173905j,  0.00704374-0.00364079j],
       [-0.00704374-0.00364079j, -0.45248049-0.89173905j]]), array([[ 0.13847472+0.98678817j, -0.03885392-0.07459385j],
       [ 0.03885392-0.07459385j,  0.13847472-0.98678817j]]), array([[  6.21168351e-01 +7.83676971e-01j,
         -2.61072193e-04 +4.65776655e-04j],
       [  2.61072193e-04 +4.65776655e-04j,
          6.21168351e-01 -7.83676971e-01j]]), array([[ 0.91194984+0.41013409j, -0.00417017-0.0109605j ],
       [ 0.00417017-0.0109605j ,  0.91194984-0.41013409j]]), array([[  9.99999140e-01+0.00097933j,   5.87986272e-05-0.00087063j],
       [ -5.87986272e-05-0.00087063j,   9.99999140e-01-0.00097933j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.99999999999999989, 0.0, 0.5, 0.5, 0.5, 0.50000000000000011]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res5(self):
        """ test gap_tol=None and move_tol=None"""
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            gap_tol=None,
                            move_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49995426754411426, 0.50004573245588579], [0.49983140749678912, 0.50016859250321111], [0.4991806690520732, 0.50081933094792697], [0.49840267398349436, 0.50159732601650586], [0.4982607642271481, 0.50173923577285207], [0.49805780279390627, 0.5019421972060939], [0.49656444666732097, 0.5034355533326792], [0.49589707761446805, 0.504102922385532], [0.49488381967459166, 0.50511618032540839], [0.49318999621241477, 0.50681000378758512], [0.48949408420771795, 0.51050591579228222], [0.48548036661221078, 0.5145196333877895], [0.47744628363240271, 0.52255371636759751], [0.4626987930942168, 0.5373012069057832], [0.42516128579800322, 0.57483871420199661], [0.32473039201237713, 0.67526960798762303], [0.22789001604668987, 0.77210998395331021], [0.14332915581102823, 0.85667084418897188], [0.067288303776433356, 0.93271169622356664], [0.00020876278448664714, 0.99979123721551355]], 'lambda_': [array([[ -9.99999959e-01 +2.71301311e-04j,
         -2.15549692e-05 -9.21868394e-05j],
       [  2.15549692e-05 -9.21868394e-05j,
         -9.99999959e-01 -2.71301311e-04j]]), array([[ -9.99999439e-01+0.00105395j,   1.10850810e-05+0.00010573j],
       [ -1.10850810e-05+0.00010573j,  -9.99999439e-01-0.00105395j]]), array([[ -9.99986749e-01 +5.14729660e-03j,
         -3.47701454e-05 +7.66994609e-05j],
       [  3.47701454e-05 +7.66994609e-05j,
         -9.99986749e-01 -5.14729660e-03j]]), array([[ -9.99949637e-01+0.01000466j,   1.20456209e-04-0.00078491j],
       [ -1.20456209e-04-0.00078491j,  -9.99949637e-01-0.01000466j]]), array([[ -9.99940291e-01 +1.09277229e-02j,
         -2.16400942e-06 -1.05451394e-06j],
       [  2.16400942e-06 -1.05451394e-06j,
         -9.99940291e-01 -1.09277229e-02j]]), array([[ -9.99925542e-01+0.01219482j,  -2.45309663e-04-0.00036945j],
       [  2.45309663e-04-0.00036945j,  -9.99925542e-01-0.01219482j]]), array([[ -9.99767027e-01+0.02157494j,  -6.34766841e-04-0.0001066j ],
       [  6.34766841e-04-0.0001066j ,  -9.99767027e-01-0.02157494j]]), array([[ -9.99667729e-01+0.02577214j,  -1.98713018e-04-0.00043411j],
       [  1.98713018e-04-0.00043411j,  -9.99667729e-01-0.02577214j]]), array([[ -9.99483365e-01+0.0321329j,  -6.80302893e-04+0.0001331j],
       [  6.80302893e-04+0.0001331j,  -9.99483365e-01-0.0321329j]]), array([[ -9.99084711e-01 +4.27740028e-02j,
          3.48214968e-04 +5.86103235e-05j],
       [ -3.48214968e-04 +5.86103235e-05j,
         -9.99084711e-01 -4.27740028e-02j]]), array([[-0.99782209+0.06593609j, -0.00157577-0.00101274j],
       [ 0.00157577-0.00101274j, -0.99782209-0.06593609j]]), array([[-0.99584147 +9.10857707e-02j, -0.00177253 +8.11427311e-05j],
       [ 0.00177253 +8.11427311e-05j, -0.99584147 -9.10857707e-02j]]), array([[-0.98997605+0.14096949j,  0.00845299+0.00189205j],
       [-0.00845299+0.00189205j, -0.98997605-0.14096949j]]), array([[ -9.72660748e-01+0.23214282j,  -8.43922855e-04+0.00633004j],
       [  8.43922855e-04+0.00633004j,  -9.72660748e-01-0.23214282j]]), array([[-0.89146614+0.45030505j,  0.03833440+0.03231041j],
       [-0.03833440+0.03231041j, -0.89146614-0.45030505j]]), array([[-0.45248049+0.89173905j,  0.00704374-0.00364079j],
       [-0.00704374-0.00364079j, -0.45248049-0.89173905j]]), array([[ 0.13847472+0.98678817j, -0.03885392-0.07459385j],
       [ 0.03885392-0.07459385j,  0.13847472-0.98678817j]]), array([[  6.21168351e-01 +7.83676971e-01j,
         -2.61072193e-04 +4.65776655e-04j],
       [  2.61072193e-04 +4.65776655e-04j,
          6.21168351e-01 -7.83676971e-01j]]), array([[ 0.91194984+0.41013409j, -0.00417017-0.0109605j ],
       [ 0.00417017-0.0109605j ,  0.91194984-0.41013409j]]), array([[  9.99999140e-01+0.00097933j,   5.87986272e-05-0.00087063j],
       [ -5.87986272e-05-0.00087063j,   9.99999140e-01-0.00097933j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.99999999999999989, 0.0, 0.5, 0.5, 0.5, 0.50000000000000011]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_warning(self):
        """ test the warning that is given when string_vec != None"""
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter('always')
            tb_surface = tb_system.surface(lambda kx: [kx / 2, 0, 0], [0, 1, 0])
            assert len(w) == 1
            assert w[-1].category == DeprecationWarning
            assert "string_vec" in str(w[-1].message)

    def test_saveload(self):
        self.createH(0.1, 0.3)
        tb_system = z2pack.em.tb.System(self.model)
        surface1 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=self._build_folder + '/tb_pickle.txt')
        surface2 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=self._build_folder + '/tb_pickle.txt')
        surface1.wcc_calc(verbose=False)
        surface2.load()
        self.assertFullAlmostEqual(surface1.get_res(), surface2.get_res())

    def testkwargcheck1(self):
        """ test kwarg check on wcc_calc """
        self.createH(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        self.assertRaises(
            TypeError,
            tb_surface.wcc_calc,
            invalid_kwarg = 3)

    def testkwargcheck2(self):
        """ test kwarg check on __init__ """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        self.assertRaises(
            TypeError,
            tb_system.surface,
            1, 2, 0, invalid_kwarg = 3)

if __name__ == "__main__":
    unittest.main()

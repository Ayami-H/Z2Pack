# -*- coding: utf-8 -*-
#
# Author:  Dominik Gresch <greschd@gmx.ch>
# Date:    15.10.2014 14:49:25 CEST
# File:    fp_phony.py

from common import *

import os
import re
import types
import shutil
import unittest
import platform


class BiAbinitTestCase(AbinitTestCase):
    def __init__(self, *args, **kwargs):
        self._input_folder = 'samples/abinit'

        self._input_files = [self._input_folder + '/' + name for name in
                             ['Bi_nscf.files', 'Bi_nscf.in', 'wannier90.win', '83bi.5.hgh', 'Bi_scf_o_DEN']]

        super(BiAbinitTestCase, self).__init__(*args, **kwargs)

        self.system = z2pack.fp.System(
            self._input_files,
            z2pack.fp.kpts.abinit,
            "Bi_nscf.in",
            "mpirun -np 4 abinit < Bi_nscf.files >& log",
            executable='/bin/bash',
            build_folder=self._build_folder)

    def test_bismuth_0(self):
        surface = self.system.surface(lambda kx: [0, kx / 2., 0], [0, 0, 1], pickle_file=None)
        surface.wcc_calc(pos_tol=None, gap_tol=None, verbose=False, num_strings=4)

        wcc = [[1.0221949351259138e-13, 0.15757835196851203, 0.15757835196925629, 0.49999999999960099, 0.50000000000000944, 0.50000000000016231, 0.50000000000118883, 0.84242164803131825, 0.84242164803198927, 0.9999999999994893], [0.00073086946115396591, 0.12660288988604718, 0.18471938345111241, 0.44386682564691493, 0.49910992832339884, 0.50089007167626942, 0.55613317435261311, 0.81528061654828488, 0.87339711011344501, 0.99926913053947974], [0.0014117690760551199, 0.10890780384574168, 0.19735744018793103, 0.4183554842404657, 0.49829345302918593, 0.50170654697049444, 0.58164451575883702, 0.8026425598122473, 0.89109219615480773, 0.99858823092455018], [0.0027320525758943825, 0.08890313131172542, 0.21004546540673921, 0.3944185092305042, 0.4966836149829485, 0.50331638501751863, 0.60558149076859613, 0.78995453459277076, 0.911096868688276, 0.99726794742437908], [0.0059702352184985681, 0.064826115022143443, 0.22550028113251125, 0.36604183538217733, 0.49237869726162459, 0.50762130273733708, 0.63395816461855525, 0.77449971886732305, 0.93517388497764609, 0.99402976478093474], [0.02191431420039567, 0.045068965522156973, 0.24561422772808886, 0.33060863838949461, 0.48271499569670079, 0.51728500430330859, 0.66939136161071189, 0.75438577227188408, 0.95493103447791172, 0.97808568579944977], [0.0432810439720226, 0.067465222157553267, 0.26097363274438806, 0.30060226713960214, 0.46650987150219436, 0.53349012849777444, 0.69939773286047835, 0.73902636725558191, 0.93253477784210392, 0.95671895602831425], [0.04672934223606523, 0.091096359363446247, 0.25461183812445198, 0.29997211957790021, 0.45179914137081079, 0.54820085862932177, 0.7000278804225184, 0.74538816187559909, 0.90890364063631435, 0.95327065776451392], [0.046083538306925992, 0.10819711223610957, 0.2414061381871386, 0.30708730096757247, 0.43405761306526552, 0.56594238693502108, 0.69291269903264541, 0.75859386181306276, 0.89180288776397831, 0.95391646169295019], [0.042030160937135186, 0.12629456252894566, 0.22375681269369715, 0.31530766233679836, 0.41510934394212479, 0.58489065605806823, 0.68469233766296811, 0.77624318730639819, 0.87370543747087859, 0.95796983906286348], [0.034569789682416724, 0.13853474354802767, 0.21054843190548092, 0.3237546667431892, 0.40148067054434639, 0.59851932945564523, 0.6762453332565378, 0.78945156809423611, 0.86146525645183314, 0.96543021031745968], [1.6750203488852649e-13, 0.17325875359634116, 0.17325875359658263, 0.35940697659336285, 0.35940697659353571, 0.640593023406415, 0.64059302340666235, 0.82674124640342983, 0.82674124640355384, 0.99999999999982103]]
        t_par = [0.0, 0.010416666666666666, 0.020833333333333332, 0.041666666666666664, 0.083333333333333329, 0.16666666666666666, 0.33333333333333331, 0.5, 0.66666666666666663, 0.83333333333333326, 0.91666666666666663, 1.0]
        self.assertWccConv(wcc, surface.get_res()['wcc'])
        self.assertFullAlmostEqual(t_par, surface.get_res()['t_par'])

    def test_bismuth_1(self):
        surface = self.system.surface(lambda kx: [0, kx, kx], [1, 0, 0], pickle_file=None)

        surface.wcc_calc(pos_tol=None, gap_tol=None, verbose=False, num_strings=4)

        wcc = [[8.2915293570930946e-14, 0.15757835196575051, 0.15757835196591707, 0.4999999999987052, 0.4999999999997401, 0.50000000000045342, 0.50000000000083666, 0.8424216480340273, 0.84242164803469433, 0.99999999999978628], [0.0058541581255277132, 0.12797182495842413, 0.17431193251392632, 0.43157854673557189, 0.46449484924200196, 0.53550515075799754, 0.5684214532643006, 0.82568806748584467, 0.87202817504155528, 0.99414584187433752], [0.0031697119747673055, 0.13085185997660662, 0.1638487948918296, 0.38306201557713093, 0.43779999723132557, 0.5622000027689078, 0.61693798442331971, 0.83615120510849394, 0.86914814002354102, 0.99683028802517559], [0.012801120443070232, 0.12568002201312628, 0.13409093385353205, 0.35530440320494738, 0.42149799415025202, 0.57850200584962841, 0.64469559679481114, 0.86590906614639174, 0.87431997798692962, 0.98719887955675534], [0.012801120442764389, 0.1256800220130653, 0.13409093385339435, 0.35530440320514001, 0.42149799415078071, 0.5785020058486241, 0.64469559679522681, 0.86590906614650764, 0.87431997798697347, 0.98719887955694674], [0.0031697119748581798, 0.13085185997626039, 0.16384879489158663, 0.38306201557736907, 0.43779999723213869, 0.56220000276833193, 0.61693798442206349, 0.83615120510845375, 0.86914814002343521, 0.99683028802522899], [0.0058541581255912951, 0.12797182495790707, 0.17431193251406232, 0.43157854673611939, 0.4644948492419318, 0.53550515075808058, 0.5684214532645353, 0.82568806748564905, 0.87202817504165075, 0.99414584187483834], [3.2961587504264035e-13, 0.1575783519654563, 0.157578351966353, 0.49999999999925238, 0.5000000000000786, 0.50000000000023781, 0.50000000000060063, 0.8424216480340162, 0.84242164803452391, 0.99999999999985767]]
        t_par = [0.0, 0.083333333333333329, 0.16666666666666666, 0.33333333333333331, 0.66666666666666663, 0.83333333333333326, 0.91666666666666663, 1.0]
        self.assertWccConv(wcc, surface.get_res()['wcc'])
        self.assertFullAlmostEqual(t_par, surface.get_res()['t_par'])

if __name__ == "__main__":
    unittest.main()

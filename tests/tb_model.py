#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Author:  Dominik Gresch <greschd@gmx.ch>
# Date:    15.10.2014 10:22:43 CEST
# File:    tb_example.py

from common import *

import os
import types
import shutil

class TbModelTestCase(BuildDirTestCase):

    def create_model(self, t1, t2):
        on_site = [1, 1, -1, -1]
        hoppings = [[0, 2, [0, 0, 0], t1],
                    [0, 2, [-1, 0, 0], t1 * (-1j)],
                    [0, 2, [-1, -1, 0], t1 * (-1)],
                    [0, 2, [0, -1, 0], t1 * (1j)],
                    [1, 3, [0, 0, 0], t1],
                    [1, 3, [-1, 0, 0], t1 * (1j)],
                    [1, 3, [-1, -1, 0], t1 * (-1)],
                    [1, 3, [0, -1, 0], t1 * (-1j)],
                    [0, 0, [1, 0, 0], t2],
                    [0, 0, [0, 1, 0], t2],
                    [1, 1, [1, 0, 0], t2],
                    [1, 1, [0, 1, 0], t2],
                    [2, 2, [1, 0, 0], -t2],
                    [2, 2, [0, 1, 0], -t2],
                    [3, 3, [1, 0, 0], -t2],
                    [3, 3, [0, 1, 0], -t2]]
                    
        positions = [[0., 0., 0.], [0., 0., 0.], [0.5, 0.5, 0.], [0.5, 0.5, 0.]]
        self.model = z2pack.em.tb.Model(on_site, hoppings, positions, occ=2)

    # this test may produce false negatives due to small numerical differences
    def test_res1(self):
        self.create_model(0.2, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False, num_strings=20, pickle_file=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49969065489267467, 0.50030934510732539], [0.49721429315076732, 0.50278570684923285], [0.49694407010581632, 0.5030559298941838], [0.49486121466808813, 0.50513878533191192], [0.49423402684744022, 0.50576597315255989], [0.49147102211796262, 0.50852897788203744], [0.48901706211697571, 0.5109829378830244], [0.48551353845670592, 0.51448646154329425], [0.48329142889985716, 0.5167085711001429], [0.47600188541927152, 0.52399811458072865], [0.4697176829830006, 0.53028231701699957], [0.45813634312386792, 0.54186365687613214], [0.44161369375808657, 0.55838630624191343], [0.41730253787808386, 0.58269746212191631], [0.37700257177471802, 0.62299742822528192], [0.3248164158241138, 0.67518358417588642], [0.24677420944177647, 0.75322579055822358], [0.15927910568213224, 0.8407208943178679], [0.079602776474529915, 0.92039722352547026], [0.00026179485059428341, 0.99973820514940592]], 'lambda_': [array([[ -9.99998111e-01+0.001924j  ,   1.27992113e-04-0.00024435j],
       [ -1.27992113e-04-0.00024435j,  -9.99998111e-01-0.001924j  ]]), array([[ -9.99846824e-01-0.01703094j,   4.51089697e-04+0.0040089j ],
       [ -4.51089697e-04+0.0040089j ,  -9.99846824e-01+0.01703094j]]), array([[ -9.99815667e-01-0.0191939j ,  -6.16055313e-06+0.00047562j],
       [  6.16055313e-06+0.00047562j,  -9.99815667e-01+0.0191939j ]]), array([[ -9.99478790e-01-0.0317522j ,  -9.42166428e-04+0.00574972j],
       [  9.42166428e-04+0.00574972j,  -9.99478790e-01+0.0317522j ]]), array([[ -9.99343813e-01-0.0361851j ,  -7.49596932e-04+0.00142101j],
       [  7.49596932e-04+0.00142101j,  -9.99343813e-01+0.0361851j ]]), array([[-0.99856445-0.0534991j , -0.00156581+0.00210787j],
       [ 0.00156581+0.00210787j, -0.99856445+0.0534991j ]]), array([[-0.99761990-0.0688501j, -0.00340719-0.0016069j],
       [ 0.00340719-0.0016069j, -0.99761990+0.0688501j]]), array([[-0.99586044-0.09079557j,  0.00417710-0.00084023j],
       [-0.00417710-0.00084023j, -0.99586044+0.09079557j]]), array([[-0.99449434-0.10473499j,  0.00223126-0.00257163j],
       [-0.00223126-0.00257163j, -0.99449434+0.10473499j]]), array([[-0.98865352-0.15017946j, -0.00289375+0.00140206j],
       [ 0.00289375+0.00140206j, -0.98865352+0.15017946j]]), array([[-0.98195332-0.18745642j, -0.02404302-0.0070501j ],
       [ 0.02404302-0.0070501j , -0.98195332+0.18745642j]]), array([[-0.96560474-0.25870295j, -0.02585567+0.00342843j],
       [ 0.02585567+0.00342843j, -0.96560474+0.25870295j]]), array([[-0.9334611-0.35629011j,  0.0407629+0.00679174j],
       [-0.0407629+0.00679174j, -0.9334611+0.35629011j]]), array([[-0.86801613-0.4955031j , -0.03179350-0.00371978j],
       [ 0.03179350-0.00371978j, -0.86801613+0.4955031j ]]), array([[-0.71594776-0.68855546j,  0.11427650+0.01584493j],
       [-0.11427650+0.01584493j, -0.71594776+0.68855546j]]), array([[-0.45296243-0.89132991j,  0.01869314-0.00256883j],
       [-0.01869314-0.00256883j, -0.45296243+0.89132991j]]), array([[ 0.02026685-0.9915281j ,  0.02303341+0.12621706j],
       [-0.02303341+0.12621706j,  0.02026685+0.9915281j ]]), array([[ 0.53964568-0.8418893j , -0.00109974-0.00193161j],
       [ 0.00109974-0.00193161j,  0.53964568+0.8418893j ]]), array([[ 0.87750632-0.4795096j , -0.00316012+0.00657327j],
       [ 0.00316012+0.00657327j,  0.87750632+0.4795096j ]]), array([[ 0.99999865+0.00035918j, -0.00115158-0.00111829j],
       [ 0.00115158-0.00111829j,  0.99999865-0.00035918j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.50000000000000011, 0.50000000000000011, 0.50000000000000011]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res2(self):
        """ test pos_check=False """
        self.create_model(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            pos_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.75, 0.75], [0.75, 0.75]], 'lambda_': [array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.125, 0.125, 0.125, 0.25, 0.25]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res3(self):
        """ test gap_tol=None """
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            gap_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49990540057553606, 0.5000945994244641], [0.49927895742998596, 0.50072104257001415], [0.49919159441195715, 0.50080840558804285], [0.49868951974056674, 0.50131048025943348], [0.49811517521170889, 0.501884824788291], [0.49762384319378455, 0.5023761568062155], [0.49690347512415667, 0.50309652487584344], [0.49586415908836329, 0.50413584091163677], [0.49433421687520834, 0.50566578312479171], [0.49260616378985439, 0.50739383621014567], [0.49039142603021757, 0.50960857396978243], [0.48578018455614963, 0.51421981544385043], [0.47695313245543347, 0.52304686754456653], [0.45930661123432831, 0.54069338876567175], [0.41453447204456012, 0.58546552795544016], [0.33032404590426012, 0.6696759540957401], [0.22833550945705314, 0.77166449054294695], [0.14388222751018878, 0.85611777248981125], [0.069059923279759308, 0.93094007672024071], [0.0001723499381632681, 0.99982765006183683]], 'lambda_': [array([[ -9.99999823e-01 +5.92521519e-04j,
          1.86171426e-05 -4.31970690e-05j],
       [ -1.86171426e-05 -4.31970690e-05j,
         -9.99999823e-01 -5.92521519e-04j]]), array([[ -9.99989738e-01-0.0044955j ,   4.64143978e-05+0.00055954j],
       [ -4.64143978e-05+0.00055954j,  -9.99989738e-01+0.0044955j ]]), array([[ -9.99987100e-01-0.00507826j,  -1.87295190e-05+0.0001031j ],
       [  1.87295190e-05+0.0001031j ,  -9.99987100e-01+0.00507826j]]), array([[ -9.99966101e-01-0.00804817j,  -1.53089170e-04-0.00173223j],
       [  1.53089170e-04-0.00173223j,  -9.99966101e-01+0.00804817j]]), array([[ -9.99929876e-01-0.01184016j,  -1.80142248e-04+0.00014606j],
       [  1.80142248e-04+0.00014606j,  -9.99929876e-01+0.01184016j]]), array([[ -9.99888552e-01-0.01492457j,  -2.39220436e-04+0.00028887j],
       [  2.39220436e-04+0.00028887j,  -9.99888552e-01+0.01492457j]]), array([[ -9.99810737e-01-0.01944779j,  -4.69328483e-04-0.00023032j],
       [  4.69328483e-04-0.00023032j,  -9.99810737e-01+0.01944779j]]), array([[ -9.99662376e-01-0.02597663j,   5.81028846e-04-0.00010329j],
       [ -5.81028846e-04-0.00010329j,  -9.99662376e-01+0.02597663j]]), array([[-0.99936642 -3.55645416e-02j, -0.00138728 +6.42689801e-05j],
       [ 0.00138728 +6.42689801e-05j, -0.99936642 +3.55645416e-02j]]), array([[ -9.98921075e-01-0.0464395j ,  -8.18840988e-05+0.00022773j],
       [  8.18840988e-05+0.00022773j,  -9.98921075e-01+0.0464395j ]]), array([[-0.99817814-0.06020016j, -0.00362833-0.00178387j],
       [ 0.00362833-0.00178387j, -0.99817814+0.06020016j]]), array([[-0.99601132-0.08909296j, -0.00484446+0.00064597j],
       [ 0.00484446+0.00064597j, -0.99601132+0.08909296j]]), array([[-0.98953367-0.14399866j,  0.00895825+0.00269366j],
       [-0.00895825+0.00269366j, -0.98953367+0.14399866j]]), array([[-0.96749051-0.25273298j, -0.00935782-0.00076737j],
       [ 0.00935782-0.00076737j, -0.96749051+0.25273298j]]), array([[-0.85924940-0.50992547j,  0.04018406+0.00719214j],
       [-0.04018406+0.00719214j, -0.85924940+0.50992547j]]), array([[-0.48353687-0.87529197j,  0.00122996-0.00738604j],
       [-0.00122996-0.00738604j, -0.48353687+0.87529197j]]), array([[ 0.13570203-0.9871842j ,  0.00863637+0.08353275j],
       [-0.00863637+0.08353275j,  0.13570203+0.9871842j ]]), array([[ 0.61844129-0.78580943j,  0.00144740-0.00564085j],
       [-0.00144740-0.00564085j,  0.61844129+0.78580943j]]), array([[  9.07326194e-01-0.42042111j,   9.48968192e-05-0.00229322j],
       [ -9.48968192e-05-0.00229322j,   9.07326194e-01+0.42042111j]]), array([[  9.99999414e-01+0.0001603j ,   1.59158866e-04-0.00105908j],
       [ -1.59158866e-04-0.00105908j,   9.99999414e-01-0.0001603j ]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res4(self):
        """ test move_tol=None """
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                          num_strings=20,
                          pickle_file=None,
                          move_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49990540057553606, 0.5000945994244641], [0.49927895742998596, 0.50072104257001415], [0.49919159441195715, 0.50080840558804285], [0.49868951974056674, 0.50131048025943348], [0.49811517521170889, 0.501884824788291], [0.49762384319378455, 0.5023761568062155], [0.49690347512415667, 0.50309652487584344], [0.49586415908836329, 0.50413584091163677], [0.49433421687520834, 0.50566578312479171], [0.49260616378985439, 0.50739383621014567], [0.49039142603021757, 0.50960857396978243], [0.48578018455614963, 0.51421981544385043], [0.47695313245543347, 0.52304686754456653], [0.45930661123432831, 0.54069338876567175], [0.41453447204456012, 0.58546552795544016], [0.33032404590426012, 0.6696759540957401], [0.22833550945705314, 0.77166449054294695], [0.14388222751018878, 0.85611777248981125], [0.069059923279759308, 0.93094007672024071], [0.0001723499381632681, 0.99982765006183683]], 'lambda_': [array([[ -9.99999823e-01 +5.92521519e-04j,
          1.86171426e-05 -4.31970690e-05j],
       [ -1.86171426e-05 -4.31970690e-05j,
         -9.99999823e-01 -5.92521519e-04j]]), array([[ -9.99989738e-01-0.0044955j ,   4.64143978e-05+0.00055954j],
       [ -4.64143978e-05+0.00055954j,  -9.99989738e-01+0.0044955j ]]), array([[ -9.99987100e-01-0.00507826j,  -1.87295190e-05+0.0001031j ],
       [  1.87295190e-05+0.0001031j ,  -9.99987100e-01+0.00507826j]]), array([[ -9.99966101e-01-0.00804817j,  -1.53089170e-04-0.00173223j],
       [  1.53089170e-04-0.00173223j,  -9.99966101e-01+0.00804817j]]), array([[ -9.99929876e-01-0.01184016j,  -1.80142248e-04+0.00014606j],
       [  1.80142248e-04+0.00014606j,  -9.99929876e-01+0.01184016j]]), array([[ -9.99888552e-01-0.01492457j,  -2.39220436e-04+0.00028887j],
       [  2.39220436e-04+0.00028887j,  -9.99888552e-01+0.01492457j]]), array([[ -9.99810737e-01-0.01944779j,  -4.69328483e-04-0.00023032j],
       [  4.69328483e-04-0.00023032j,  -9.99810737e-01+0.01944779j]]), array([[ -9.99662376e-01-0.02597663j,   5.81028846e-04-0.00010329j],
       [ -5.81028846e-04-0.00010329j,  -9.99662376e-01+0.02597663j]]), array([[-0.99936642 -3.55645416e-02j, -0.00138728 +6.42689801e-05j],
       [ 0.00138728 +6.42689801e-05j, -0.99936642 +3.55645416e-02j]]), array([[ -9.98921075e-01-0.0464395j ,  -8.18840988e-05+0.00022773j],
       [  8.18840988e-05+0.00022773j,  -9.98921075e-01+0.0464395j ]]), array([[-0.99817814-0.06020016j, -0.00362833-0.00178387j],
       [ 0.00362833-0.00178387j, -0.99817814+0.06020016j]]), array([[-0.99601132-0.08909296j, -0.00484446+0.00064597j],
       [ 0.00484446+0.00064597j, -0.99601132+0.08909296j]]), array([[-0.98953367-0.14399866j,  0.00895825+0.00269366j],
       [-0.00895825+0.00269366j, -0.98953367+0.14399866j]]), array([[-0.96749051-0.25273298j, -0.00935782-0.00076737j],
       [ 0.00935782-0.00076737j, -0.96749051+0.25273298j]]), array([[-0.85924940-0.50992547j,  0.04018406+0.00719214j],
       [-0.04018406+0.00719214j, -0.85924940+0.50992547j]]), array([[-0.48353687-0.87529197j,  0.00122996-0.00738604j],
       [-0.00122996-0.00738604j, -0.48353687+0.87529197j]]), array([[ 0.13570203-0.9871842j ,  0.00863637+0.08353275j],
       [-0.00863637+0.08353275j,  0.13570203+0.9871842j ]]), array([[ 0.61844129-0.78580943j,  0.00144740-0.00564085j],
       [-0.00144740-0.00564085j,  0.61844129+0.78580943j]]), array([[  9.07326194e-01-0.42042111j,   9.48968192e-05-0.00229322j],
       [ -9.48968192e-05-0.00229322j,   9.07326194e-01+0.42042111j]]), array([[  9.99999414e-01+0.0001603j ,   1.59158866e-04-0.00105908j],
       [ -1.59158866e-04-0.00105908j,   9.99999414e-01-0.0001603j ]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res5(self):
        """ test gap_tol=None and move_tol=None"""
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            gap_tol=None,
                            move_tol=None)

        
        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49990540057553606, 0.5000945994244641], [0.49927895742998596, 0.50072104257001415], [0.49919159441195715, 0.50080840558804285], [0.49868951974056674, 0.50131048025943348], [0.49811517521170889, 0.501884824788291], [0.49762384319378455, 0.5023761568062155], [0.49690347512415667, 0.50309652487584344], [0.49586415908836329, 0.50413584091163677], [0.49433421687520834, 0.50566578312479171], [0.49260616378985439, 0.50739383621014567], [0.49039142603021757, 0.50960857396978243], [0.48578018455614963, 0.51421981544385043], [0.47695313245543347, 0.52304686754456653], [0.45930661123432831, 0.54069338876567175], [0.41453447204456012, 0.58546552795544016], [0.33032404590426012, 0.6696759540957401], [0.22833550945705314, 0.77166449054294695], [0.14388222751018878, 0.85611777248981125], [0.069059923279759308, 0.93094007672024071], [0.0001723499381632681, 0.99982765006183683]], 'lambda_': [array([[ -9.99999823e-01 +5.92521519e-04j,
          1.86171426e-05 -4.31970690e-05j],
       [ -1.86171426e-05 -4.31970690e-05j,
         -9.99999823e-01 -5.92521519e-04j]]), array([[ -9.99989738e-01-0.0044955j ,   4.64143978e-05+0.00055954j],
       [ -4.64143978e-05+0.00055954j,  -9.99989738e-01+0.0044955j ]]), array([[ -9.99987100e-01-0.00507826j,  -1.87295190e-05+0.0001031j ],
       [  1.87295190e-05+0.0001031j ,  -9.99987100e-01+0.00507826j]]), array([[ -9.99966101e-01-0.00804817j,  -1.53089170e-04-0.00173223j],
       [  1.53089170e-04-0.00173223j,  -9.99966101e-01+0.00804817j]]), array([[ -9.99929876e-01-0.01184016j,  -1.80142248e-04+0.00014606j],
       [  1.80142248e-04+0.00014606j,  -9.99929876e-01+0.01184016j]]), array([[ -9.99888552e-01-0.01492457j,  -2.39220436e-04+0.00028887j],
       [  2.39220436e-04+0.00028887j,  -9.99888552e-01+0.01492457j]]), array([[ -9.99810737e-01-0.01944779j,  -4.69328483e-04-0.00023032j],
       [  4.69328483e-04-0.00023032j,  -9.99810737e-01+0.01944779j]]), array([[ -9.99662376e-01-0.02597663j,   5.81028846e-04-0.00010329j],
       [ -5.81028846e-04-0.00010329j,  -9.99662376e-01+0.02597663j]]), array([[-0.99936642 -3.55645416e-02j, -0.00138728 +6.42689801e-05j],
       [ 0.00138728 +6.42689801e-05j, -0.99936642 +3.55645416e-02j]]), array([[ -9.98921075e-01-0.0464395j ,  -8.18840988e-05+0.00022773j],
       [  8.18840988e-05+0.00022773j,  -9.98921075e-01+0.0464395j ]]), array([[-0.99817814-0.06020016j, -0.00362833-0.00178387j],
       [ 0.00362833-0.00178387j, -0.99817814+0.06020016j]]), array([[-0.99601132-0.08909296j, -0.00484446+0.00064597j],
       [ 0.00484446+0.00064597j, -0.99601132+0.08909296j]]), array([[-0.98953367-0.14399866j,  0.00895825+0.00269366j],
       [-0.00895825+0.00269366j, -0.98953367+0.14399866j]]), array([[-0.96749051-0.25273298j, -0.00935782-0.00076737j],
       [ 0.00935782-0.00076737j, -0.96749051+0.25273298j]]), array([[-0.85924940-0.50992547j,  0.04018406+0.00719214j],
       [-0.04018406+0.00719214j, -0.85924940+0.50992547j]]), array([[-0.48353687-0.87529197j,  0.00122996-0.00738604j],
       [-0.00122996-0.00738604j, -0.48353687+0.87529197j]]), array([[ 0.13570203-0.9871842j ,  0.00863637+0.08353275j],
       [-0.00863637+0.08353275j,  0.13570203+0.9871842j ]]), array([[ 0.61844129-0.78580943j,  0.00144740-0.00564085j],
       [-0.00144740-0.00564085j,  0.61844129+0.78580943j]]), array([[  9.07326194e-01-0.42042111j,   9.48968192e-05-0.00229322j],
       [ -9.48968192e-05-0.00229322j,   9.07326194e-01+0.42042111j]]), array([[  9.99999414e-01+0.0001603j ,   1.59158866e-04-0.00105908j],
       [ -1.59158866e-04-0.00105908j,   9.99999414e-01-0.0001603j ]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_warning(self):
        """ test the warning that is given when string_vec != None"""
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter('always')
            tb_surface = tb_system.surface(lambda kx: [kx / 2, 0, 0], [0, 1, 0])
            assert len(w) == 1
            assert w[-1].category == DeprecationWarning
            assert "string_vec" in str(w[-1].message)

    def test_saveload(self):
        self.create_model(0.1, 0.3)
        tb_system = z2pack.em.tb.System(self.model)
        surface1 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=self._build_folder + '/tb_pickle.txt')
        surface2 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=self._build_folder + '/tb_pickle.txt')
        surface1.wcc_calc(verbose=False)
        surface2.load()
        self.assertFullAlmostEqual(surface1.get_res(), surface2.get_res())

    def testkwargcheck1(self):
        """ test kwarg check on wcc_calc """
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        self.assertRaises(
            TypeError,
            tb_surface.wcc_calc,
            invalid_kwarg = 3)

    def testkwargcheck2(self):
        """ test kwarg check on __init__ """
        self.create_model(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        self.assertRaises(
            TypeError,
            tb_system.surface,
            1, 2, 0, invalid_kwarg = 3)

if __name__ == "__main__":
    unittest.main()

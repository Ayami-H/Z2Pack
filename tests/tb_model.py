#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Author:  Dominik Gresch <greschd@gmx.ch>
# Date:    15.10.2014 10:22:43 CEST
# File:    tb_example.py

from common import *

import os
import types
import shutil

class TbModelTestCase(BuildDirTestCase):

    def create_model(self, t1, t2):
        on_site = [1, 1, -1, -1]
        hoppings = [[0, 2, [0, 0, 0], t1],
                    [0, 2, [-1, 0, 0], t1 * (-1j)],
                    [0, 2, [-1, -1, 0], t1 * (-1)],
                    [0, 2, [0, -1, 0], t1 * (1j)],
                    [1, 3, [0, 0, 0], t1],
                    [1, 3, [-1, 0, 0], t1 * (1j)],
                    [1, 3, [-1, -1, 0], t1 * (-1)],
                    [1, 3, [0, -1, 0], t1 * (-1j)],
                    [0, 0, [1, 0, 0], t2],
                    [0, 0, [0, 1, 0], t2],
                    [1, 1, [1, 0, 0], t2],
                    [1, 1, [0, 1, 0], t2],
                    [2, 2, [1, 0, 0], -t2],
                    [2, 2, [0, 1, 0], -t2],
                    [3, 3, [1, 0, 0], -t2],
                    [3, 3, [0, 1, 0], -t2]]
                    
        positions = [[0., 0., 0.], [0., 0., 0.], [0.5, 0.5, 0.], [0.5, 0.5, 0.]]
        self.model = z2pack.em.tb.Model(on_site, hoppings, positions, occ=2)

    # this test may produce false negatives due to small numerical differences
    def test_res1(self):
        self.create_model(0.2, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False, num_strings=20, pickle_file=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.49969161636577025, 0.5003083836342298], [0.49717287154363521, 0.5028271284563649], [0.49689548622130841, 0.50310451377869159], [0.49487476373898814, 0.50512523626101191], [0.49407068175879676, 0.50592931824120346], [0.49279248934418329, 0.50720751065581682], [0.48957243260869182, 0.51042756739130835], [0.48577573228482973, 0.51422426771517038], [0.48296138176111719, 0.51703861823888286], [0.47340437449432887, 0.52659562550567118], [0.47026916047165029, 0.52973083952834976], [0.4586893437646109, 0.54131065623538899], [0.44204469570753641, 0.55795530429246387], [0.4204122798458601, 0.57958772015414017], [0.37724844277130948, 0.62275155722869058], [0.32216601217661178, 0.67783398782338833], [0.24327634305426374, 0.75672365694573629], [0.16053304062782292, 0.83946695937217708], [0.078829113266741441, 0.92117088673325875], [0.00039099919565066245, 0.99960900080434922]], 'lambda_': [array([[ -9.99998123e-01+0.00191772j,   1.29888698e-04-0.00024472j],
       [ -1.29888698e-04-0.00024472j,  -9.99998123e-01-0.00191772j]]), array([[ -9.99842235e-01-0.0172102j ,   4.32183135e-04+0.00437337j],
       [ -4.32183135e-04+0.00437337j,  -9.99842235e-01+0.0172102j ]]), array([[ -9.99809759e-01-0.01949902j,  -1.83060237e-05+0.0004826j ],
       [  1.83060237e-05+0.0004826j ,  -9.99809759e-01+0.01949902j]]), array([[ -9.99481534e-01-0.03050229j,  -7.22972755e-05-0.01030863j],
       [  7.22972755e-05-0.01030863j,  -9.99481534e-01+0.03050229j]]), array([[ -9.99306113e-01-0.03720288j,  -9.11541804e-04+0.00155182j],
       [  9.11541804e-04+0.00155182j,  -9.99306113e-01+0.03720288j]]), array([[-0.99897476-0.04479323j,  0.00111749-0.00646136j],
       [-0.00111749-0.00646136j, -0.99897476+0.04479323j]]), array([[-0.99785444-0.06507026j,  0.00115432-0.00714443j],
       [-0.00115432-0.00714443j, -0.99785444+0.06507026j]]), array([[-0.99600883-0.08915189j,  0.00425395-0.00050877j],
       [-0.00425395-0.00050877j, -0.99600883+0.08915189j]]), array([[ -9.94274892e-01-0.10684208j,  -7.49788345e-04+0.00128324j],
       [  7.49788345e-04+0.00128324j,  -9.94274892e-01+0.10684208j]]), array([[-0.98607038-0.16627646j, -0.00415993+0.00020907j],
       [ 0.00415993+0.00020907j, -0.98607038+0.16627646j]]), array([[-0.98260274-0.18409984j, -0.02393956-0.00509882j],
       [ 0.02393956-0.00509882j, -0.98260274+0.18409984j]]), array([[-0.96650236-0.25634885j, -0.01257465-0.00058247j],
       [ 0.01257465-0.00058247j, -0.96650236+0.25634885j]]), array([[-0.93442900-0.35394754j,  0.03923527+0.00491713j],
       [-0.03923527+0.00491713j, -0.93442900+0.35394754j]]), array([[-0.87755169-0.47845125j, -0.03017535-0.00876846j],
       [ 0.03017535-0.00876846j, -0.87755169+0.47845125j]]), array([[-0.71702545-0.68731614j,  0.11392999+0.02215807j],
       [-0.11392999+0.02215807j, -0.71702545+0.68731614j]]), array([[-0.43805369-0.89786078j,  0.04165333-0.01483211j],
       [-0.04165333-0.01483211j, -0.43805369+0.89786078j]]), array([[ 0.04223342-0.98906184j,  0.01360712+0.14066934j],
       [-0.01360712+0.14066934j,  0.04223342+0.98906184j]]), array([[ 0.53299598-0.84602108j, -0.01132489-0.00594761j],
       [ 0.01132489-0.00594761j,  0.53299598+0.84602108j]]), array([[ 0.87982715-0.47528699j, -0.00227607+0.0011347j ],
       [ 0.00227607+0.0011347j ,  0.87982715+0.47528699j]]), array([[  9.99996982e-01+0.00193333j,  -2.44530482e-04-0.00149597j],
       [  2.44530482e-04-0.00149597j,   9.99996982e-01-0.00193333j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.50000000000000011, 0.49999999999999994]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res2(self):
        """ test pos_check=False """
        self.create_model(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            pos_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.625, 0.625], [0.75, 0.75], [0.75, 0.75]], 'lambda_': [array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-1. -1.66533454e-16j,  0. +0.00000000e+00j],
       [ 0. +0.00000000e+00j, -1. -1.66533454e-16j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[-0.70710678+0.70710678j,  0.00000000+0.j        ],
       [ 0.00000000+0.j        , -0.70710678+0.70710678j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]]), array([[ -1.11022302e-16+1.j,   0.00000000e+00+0.j],
       [  0.00000000e+00+0.j,  -1.11022302e-16+1.j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.125, 0.125, 0.125, 0.25, 0.25]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res3(self):
        """ test gap_tol=None """
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            gap_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.4999054936917175, 0.50009450630828245], [0.49927691301200061, 0.5007230869879995], [0.49918463487762427, 0.5008153651223759], [0.49868928364835063, 0.50131071635164948], [0.49810398748296902, 0.50189601251703098], [0.49805065016249689, 0.50194934983750328], [0.49716808482856534, 0.50283191517143477], [0.49590532540165388, 0.50409467459834634], [0.49522632334288985, 0.50477367665711026], [0.49285023217117385, 0.50714976782882626], [0.490558790558068, 0.50944120944193205], [0.48586559648858968, 0.51413440351141038], [0.47719284365992032, 0.52280715634007979], [0.46094201141250074, 0.53905798858749931], [0.42003031880365577, 0.57996968119634429], [0.32823244190229162, 0.67176755809770849], [0.22771590342344966, 0.77228409657655028], [0.14630573975388969, 0.8536942602461105], [0.06767674991480685, 0.93232325008519323], [0.00016210745599597528, 0.99983789254400413]], 'lambda_': [array([[ -9.99999824e-01 +5.91930731e-04j,
          1.87061191e-05 -4.32117853e-05j],
       [ -1.87061191e-05 -4.32117853e-05j,
         -9.99999824e-01 -5.91930731e-04j]]), array([[ -9.99989679e-01-0.00450702j,   4.63636089e-05+0.00057091j],
       [ -4.63636089e-05+0.00057091j,  -9.99989679e-01+0.00450702j]]), array([[ -9.99986877e-01-0.00512196j,  -1.94708884e-05+0.00010459j],
       [  1.94708884e-05+0.00010459j,  -9.99986877e-01+0.00512196j]]), array([[ -9.99966089e-01-0.008079j  ,  -6.00102328e-05-0.00159613j],
       [  6.00102328e-05-0.00159613j,  -9.99966089e-01+0.008079j  ]]), array([[ -9.99929041e-01-0.01191043j,  -1.82189354e-04+0.00014573j],
       [  1.82189354e-04+0.00014573j,  -9.99929041e-01+0.01191043j]]), array([[ -9.99924993e-01-0.01221246j,   2.04044432e-04-0.00090732j],
       [ -2.04044432e-04-0.00090732j,  -9.99924993e-01+0.01221246j]]), array([[ -9.99841701e-01-0.01774905j,   6.75339872e-05-0.00124104j],
       [ -6.75339872e-05-0.00124104j,  -9.99841701e-01+0.01774905j]]), array([[ -9.99669064e-01 -2.57173904e-02j,
          6.10343380e-04 -8.15408946e-05j],
       [ -6.10343380e-04 -8.15408946e-05j,
         -9.99669064e-01 +2.57173904e-02j]]), array([[ -9.99550217e-01-0.02998202j,   5.52168658e-05+0.00066307j],
       [ -5.52168658e-05+0.00066307j,  -9.99550217e-01+0.02998202j]]), array([[ -9.98991118e-01-0.0449072j ,  -2.07739726e-04-0.00021839j],
       [  2.07739726e-04-0.00021839j,  -9.98991118e-01+0.0449072j ]]), array([[-0.99824103-0.05915973j, -0.00372024-0.00106123j],
       [ 0.00372024-0.00106123j, -0.99824103+0.05915973j]]), array([[-0.99605907-0.08866195j, -0.00231936-0.00013379j],
       [ 0.00231936-0.00013379j, -0.99605907+0.08866195j]]), array([[-0.98974989-0.14260559j,  0.00760920+0.00095385j],
       [-0.00760920+0.00095385j, -0.98974989+0.14260559j]]), array([[-0.97003814-0.24281986j, -0.00771569-0.0022336j ],
       [ 0.00771569-0.0022336j , -0.97003814+0.24281986j]]), array([[-0.87639844-0.47979051j,  0.04136289+0.00399417j],
       [-0.04136289+0.00399417j, -0.87639844+0.47979051j]]), array([[-0.47199199-0.88153867j,  0.01056318+0.00124344j],
       [-0.01056318+0.00124344j, -0.47199199+0.88153867j]]), array([[ 0.13955808-0.98713377j,  0.00878512+0.07754539j],
       [-0.00878512+0.07754539j,  0.13955808+0.98713377j]]), array([[ 0.60640391-0.79513196j,  0.00574479-0.00254206j],
       [-0.00574479-0.00254206j,  0.60640391+0.79513196j]]), array([[ 0.91094571-0.41251887j, -0.00185111+0.00163508j],
       [ 0.00185111+0.00163508j,  0.91094571+0.41251887j]]), array([[  9.99999481e-01+0.00030907j,   1.60200842e-04-0.00095721j],
       [ -1.60200842e-04-0.00095721j,   9.99999481e-01-0.00030907j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.49999999999999994, 0.50000000000000011, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res4(self):
        """ test move_tol=None """
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                          num_strings=20,
                          pickle_file=None,
                          move_tol=None)

        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.4999054936917175, 0.50009450630828245], [0.49927691301200061, 0.5007230869879995], [0.49918463487762427, 0.5008153651223759], [0.49868928364835063, 0.50131071635164948], [0.49810398748296902, 0.50189601251703098], [0.49805065016249689, 0.50194934983750328], [0.49716808482856534, 0.50283191517143477], [0.49590532540165388, 0.50409467459834634], [0.49522632334288985, 0.50477367665711026], [0.49285023217117385, 0.50714976782882626], [0.490558790558068, 0.50944120944193205], [0.48586559648858968, 0.51413440351141038], [0.47719284365992032, 0.52280715634007979], [0.46094201141250074, 0.53905798858749931], [0.42003031880365577, 0.57996968119634429], [0.32823244190229162, 0.67176755809770849], [0.22771590342344966, 0.77228409657655028], [0.14630573975388969, 0.8536942602461105], [0.06767674991480685, 0.93232325008519323], [0.00016210745599597528, 0.99983789254400413]], 'lambda_': [array([[ -9.99999824e-01 +5.91930731e-04j,
          1.87061191e-05 -4.32117853e-05j],
       [ -1.87061191e-05 -4.32117853e-05j,
         -9.99999824e-01 -5.91930731e-04j]]), array([[ -9.99989679e-01-0.00450702j,   4.63636089e-05+0.00057091j],
       [ -4.63636089e-05+0.00057091j,  -9.99989679e-01+0.00450702j]]), array([[ -9.99986877e-01-0.00512196j,  -1.94708884e-05+0.00010459j],
       [  1.94708884e-05+0.00010459j,  -9.99986877e-01+0.00512196j]]), array([[ -9.99966089e-01-0.008079j  ,  -6.00102328e-05-0.00159613j],
       [  6.00102328e-05-0.00159613j,  -9.99966089e-01+0.008079j  ]]), array([[ -9.99929041e-01-0.01191043j,  -1.82189354e-04+0.00014573j],
       [  1.82189354e-04+0.00014573j,  -9.99929041e-01+0.01191043j]]), array([[ -9.99924993e-01-0.01221246j,   2.04044432e-04-0.00090732j],
       [ -2.04044432e-04-0.00090732j,  -9.99924993e-01+0.01221246j]]), array([[ -9.99841701e-01-0.01774905j,   6.75339872e-05-0.00124104j],
       [ -6.75339872e-05-0.00124104j,  -9.99841701e-01+0.01774905j]]), array([[ -9.99669064e-01 -2.57173904e-02j,
          6.10343380e-04 -8.15408946e-05j],
       [ -6.10343380e-04 -8.15408946e-05j,
         -9.99669064e-01 +2.57173904e-02j]]), array([[ -9.99550217e-01-0.02998202j,   5.52168658e-05+0.00066307j],
       [ -5.52168658e-05+0.00066307j,  -9.99550217e-01+0.02998202j]]), array([[ -9.98991118e-01-0.0449072j ,  -2.07739726e-04-0.00021839j],
       [  2.07739726e-04-0.00021839j,  -9.98991118e-01+0.0449072j ]]), array([[-0.99824103-0.05915973j, -0.00372024-0.00106123j],
       [ 0.00372024-0.00106123j, -0.99824103+0.05915973j]]), array([[-0.99605907-0.08866195j, -0.00231936-0.00013379j],
       [ 0.00231936-0.00013379j, -0.99605907+0.08866195j]]), array([[-0.98974989-0.14260559j,  0.00760920+0.00095385j],
       [-0.00760920+0.00095385j, -0.98974989+0.14260559j]]), array([[-0.97003814-0.24281986j, -0.00771569-0.0022336j ],
       [ 0.00771569-0.0022336j , -0.97003814+0.24281986j]]), array([[-0.87639844-0.47979051j,  0.04136289+0.00399417j],
       [-0.04136289+0.00399417j, -0.87639844+0.47979051j]]), array([[-0.47199199-0.88153867j,  0.01056318+0.00124344j],
       [-0.01056318+0.00124344j, -0.47199199+0.88153867j]]), array([[ 0.13955808-0.98713377j,  0.00878512+0.07754539j],
       [-0.00878512+0.07754539j,  0.13955808+0.98713377j]]), array([[ 0.60640391-0.79513196j,  0.00574479-0.00254206j],
       [-0.00574479-0.00254206j,  0.60640391+0.79513196j]]), array([[ 0.91094571-0.41251887j, -0.00185111+0.00163508j],
       [ 0.00185111+0.00163508j,  0.91094571+0.41251887j]]), array([[  9.99999481e-01+0.00030907j,   1.60200842e-04-0.00095721j],
       [ -1.60200842e-04-0.00095721j,   9.99999481e-01-0.00030907j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.49999999999999994, 0.50000000000000011, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_res5(self):
        """ test gap_tol=None and move_tol=None"""
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        tb_surface.wcc_calc(verbose=False,
                            num_strings=20,
                            pickle_file=None,
                            gap_tol=None,
                            move_tol=None)

        
        res = {'t_par': [0.0, 0.052631578947368418, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.26315789473684209, 0.31578947368421051, 0.36842105263157893, 0.42105263157894735, 0.47368421052631576, 0.52631578947368418, 0.57894736842105265, 0.63157894736842102, 0.68421052631578938, 0.73684210526315785, 0.78947368421052633, 0.84210526315789469, 0.89473684210526305, 0.94736842105263153, 1.0], 'wcc': [[0.4999054936917175, 0.50009450630828245], [0.49927691301200061, 0.5007230869879995], [0.49918463487762427, 0.5008153651223759], [0.49868928364835063, 0.50131071635164948], [0.49810398748296902, 0.50189601251703098], [0.49805065016249689, 0.50194934983750328], [0.49716808482856534, 0.50283191517143477], [0.49590532540165388, 0.50409467459834634], [0.49522632334288985, 0.50477367665711026], [0.49285023217117385, 0.50714976782882626], [0.490558790558068, 0.50944120944193205], [0.48586559648858968, 0.51413440351141038], [0.47719284365992032, 0.52280715634007979], [0.46094201141250074, 0.53905798858749931], [0.42003031880365577, 0.57996968119634429], [0.32823244190229162, 0.67176755809770849], [0.22771590342344966, 0.77228409657655028], [0.14630573975388969, 0.8536942602461105], [0.06767674991480685, 0.93232325008519323], [0.00016210745599597528, 0.99983789254400413]], 'lambda_': [array([[ -9.99999824e-01 +5.91930731e-04j,
          1.87061191e-05 -4.32117853e-05j],
       [ -1.87061191e-05 -4.32117853e-05j,
         -9.99999824e-01 -5.91930731e-04j]]), array([[ -9.99989679e-01-0.00450702j,   4.63636089e-05+0.00057091j],
       [ -4.63636089e-05+0.00057091j,  -9.99989679e-01+0.00450702j]]), array([[ -9.99986877e-01-0.00512196j,  -1.94708884e-05+0.00010459j],
       [  1.94708884e-05+0.00010459j,  -9.99986877e-01+0.00512196j]]), array([[ -9.99966089e-01-0.008079j  ,  -6.00102328e-05-0.00159613j],
       [  6.00102328e-05-0.00159613j,  -9.99966089e-01+0.008079j  ]]), array([[ -9.99929041e-01-0.01191043j,  -1.82189354e-04+0.00014573j],
       [  1.82189354e-04+0.00014573j,  -9.99929041e-01+0.01191043j]]), array([[ -9.99924993e-01-0.01221246j,   2.04044432e-04-0.00090732j],
       [ -2.04044432e-04-0.00090732j,  -9.99924993e-01+0.01221246j]]), array([[ -9.99841701e-01-0.01774905j,   6.75339872e-05-0.00124104j],
       [ -6.75339872e-05-0.00124104j,  -9.99841701e-01+0.01774905j]]), array([[ -9.99669064e-01 -2.57173904e-02j,
          6.10343380e-04 -8.15408946e-05j],
       [ -6.10343380e-04 -8.15408946e-05j,
         -9.99669064e-01 +2.57173904e-02j]]), array([[ -9.99550217e-01-0.02998202j,   5.52168658e-05+0.00066307j],
       [ -5.52168658e-05+0.00066307j,  -9.99550217e-01+0.02998202j]]), array([[ -9.98991118e-01-0.0449072j ,  -2.07739726e-04-0.00021839j],
       [  2.07739726e-04-0.00021839j,  -9.98991118e-01+0.0449072j ]]), array([[-0.99824103-0.05915973j, -0.00372024-0.00106123j],
       [ 0.00372024-0.00106123j, -0.99824103+0.05915973j]]), array([[-0.99605907-0.08866195j, -0.00231936-0.00013379j],
       [ 0.00231936-0.00013379j, -0.99605907+0.08866195j]]), array([[-0.98974989-0.14260559j,  0.00760920+0.00095385j],
       [-0.00760920+0.00095385j, -0.98974989+0.14260559j]]), array([[-0.97003814-0.24281986j, -0.00771569-0.0022336j ],
       [ 0.00771569-0.0022336j , -0.97003814+0.24281986j]]), array([[-0.87639844-0.47979051j,  0.04136289+0.00399417j],
       [-0.04136289+0.00399417j, -0.87639844+0.47979051j]]), array([[-0.47199199-0.88153867j,  0.01056318+0.00124344j],
       [-0.01056318+0.00124344j, -0.47199199+0.88153867j]]), array([[ 0.13955808-0.98713377j,  0.00878512+0.07754539j],
       [-0.00878512+0.07754539j,  0.13955808+0.98713377j]]), array([[ 0.60640391-0.79513196j,  0.00574479-0.00254206j],
       [-0.00574479-0.00254206j,  0.60640391+0.79513196j]]), array([[ 0.91094571-0.41251887j, -0.00185111+0.00163508j],
       [ 0.00185111+0.00163508j,  0.91094571+0.41251887j]]), array([[  9.99999481e-01+0.00030907j,   1.60200842e-04-0.00095721j],
       [ -1.60200842e-04-0.00095721j,   9.99999481e-01-0.00030907j]])], 'kpt': [[0.0, 0.0, 0], [0.026315789473684209, 0.0, 0], [0.052631578947368418, 0.0, 0], [0.078947368421052627, 0.0, 0], [0.10526315789473684, 0.0, 0], [0.13157894736842105, 0.0, 0], [0.15789473684210525, 0.0, 0], [0.18421052631578946, 0.0, 0], [0.21052631578947367, 0.0, 0], [0.23684210526315788, 0.0, 0], [0.26315789473684209, 0.0, 0], [0.28947368421052633, 0.0, 0], [0.31578947368421051, 0.0, 0], [0.34210526315789469, 0.0, 0], [0.36842105263157893, 0.0, 0], [0.39473684210526316, 0.0, 0], [0.42105263157894735, 0.0, 0], [0.44736842105263153, 0.0, 0], [0.47368421052631576, 0.0, 0], [0.5, 0.0, 0]], 'gap': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.49999999999999994, 0.50000000000000011, 0.5, 0.5]}

        self.assertFullAlmostEqual(tb_surface.get_res(), res)

    def test_precompute(self):
        """ test that precomputation will be redone after changing _hop or _on_site"""
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        self.model._unchanged = True
        self.model._hop = []
        self.assertEqual(self.model._unchanged, False)
        self.model._unchanged = True
        self.model._on_site = []
        self.assertEqual(self.model._unchanged, False)

    def test_warning(self):
        """ test the warning that is given when string_vec != None"""
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter('always')
            tb_surface = tb_system.surface(lambda kx: [kx / 2, 0, 0], [0, 1, 0])
            assert len(w) == 1
            assert w[-1].category == DeprecationWarning
            assert "string_vec" in str(w[-1].message)

    def test_saveload(self):
        self.create_model(0.1, 0.3)
        tb_system = z2pack.em.tb.System(self.model)
        surface1 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=self._build_folder + '/tb_pickle.txt')
        surface2 = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0], pickle_file=self._build_folder + '/tb_pickle.txt')
        surface1.wcc_calc(verbose=False)
        surface2.load()
        self.assertFullAlmostEqual(surface1.get_res(), surface2.get_res())

    def testkwargcheck1(self):
        """ test kwarg check on wcc_calc """
        self.create_model(0.1, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        tb_surface = tb_system.surface(lambda kx, ky: [kx / 2, ky, 0])
        self.assertRaises(
            TypeError,
            tb_surface.wcc_calc,
            invalid_kwarg = 3)

    def testkwargcheck2(self):
        """ test kwarg check on __init__ """
        self.create_model(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.em.tb.System(self.model)
        self.assertRaises(
            TypeError,
            tb_system.surface,
            1, 2, 0, invalid_kwarg = 3)

if __name__ == "__main__":
    unittest.main()

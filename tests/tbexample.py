#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Author:  Dominik Gresch <greschd@gmx.ch>
# Date:    15.10.2014 10:22:43 CEST
# File:    tbexample.py

import sys
sys.path.append('../')
import z2pack

from common import *

import types
import unittest


class TbExampleTestCase(CommonTestCase):

    def createH(self, t1, t2):

        self.H = z2pack.tb.Hamilton()

        # create the two atoms
        self.H.add_atom(([1, 1], 1), [0, 0, 0])
        self.H.add_atom(([-1, -1], 1), [0.5, 0.5, 0])

        # add hopping between different atoms
        self.H.add_hopping(((0, 0), (1, 1)),
                           z2pack.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, -1j, 1j, -1])
        self.H.add_hopping(((0, 1), (1, 0)),
                           z2pack.tb.vectors.combine([0, -1], [0, -1], 0),
                           t1,
                           phase=[1, 1j, -1j, -1])

        # add hopping between neighbouring orbitals of the same type
        self.H.add_hopping((((0, 0), (0, 0)), ((0, 1), (0, 1))),
                           z2pack.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           t2,
                           phase=[1])
        self.H.add_hopping((((1, 1), (1, 1)), ((1, 0), (1, 0))),
                           z2pack.tb.vectors.neighbours([0, 1],
                                                        forward_only=True),
                           -t2,
                           phase=[1])

    # this test may produce false negatives due to small numerical differences
    def test_res1(self):
        self.createH(0.2, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(1, 2, 0)
        tb_plane.wcc_calc(verbose=False, num_strings=20, use_pickle=False)
        
        res = ([0.0, 0.026315789473684209, 0.052631578947368418, 0.078947368421052627, 0.10526315789473684, 0.13157894736842105, 0.15789473684210525, 0.18421052631578946, 0.21052631578947367, 0.23684210526315788, 0.26315789473684209, 0.28947368421052633, 0.31578947368421051, 0.34210526315789469, 0.36842105263157893, 0.39473684210526316, 0.42105263157894735, 0.44736842105263153, 0.47368421052631576, 0.5], [[0.49983964546467036, 0.50016035453532992], [0.49890749383729077, 0.50109250616270917], [0.49641395036486252, 0.50358604963513764], [0.49554883941587446, 0.50445116058412554], [0.49652567629394373, 0.5034743237060566], [0.49208434055431732, 0.50791565944568262], [0.48929271594465651, 0.51070728405534349], [0.48629705364229231, 0.51370294635770786], [0.48144595206989665, 0.5185540479301034], [0.47656990584661874, 0.52343009415338138], [0.46885604857621033, 0.53114395142378967], [0.45994586240888752, 0.54005413759111265], [0.44382468776376022, 0.55617531223623984], [0.42064868156101387, 0.57935131843898624], [0.38301143221824507, 0.61698856778175493], [0.32658906586480302, 0.67341093413519704], [0.24624568378330627, 0.75375431621669375], [0.15963543249220546, 0.84036456750779442], [0.081400024690988518, 0.9185999753090115], [0.0038664353524984706, 0.99613356464750147]], [0.0, 0.0, 0.0, 0.0, 2.2204460492503131e-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.49999999999999994, 0.5, 0.5])

        self.assertContainerAlmostEqual(tb_plane.get_res(), res)

    def test_res2(self):
        """ test no_iter=True """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(1, 2, 0)
        tb_plane.wcc_calc(verbose=False,
                          num_strings=20,
                          use_pickle=False,
                          no_iter=True)

        res = ([0.0, 0.026315789473684209, 0.052631578947368418, 0.078947368421052627, 0.10526315789473684, 0.13157894736842105, 0.15789473684210525, 0.18421052631578946, 0.21052631578947367, 0.23684210526315788, 0.26315789473684209, 0.28947368421052633, 0.31578947368421051, 0.34210526315789469, 0.36842105263157893, 0.39473684210526316, 0.42105263157894735, 0.44736842105263153, 0.47368421052631576, 0.5], [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419], [0.71428571428571419, 0.71428571428571419]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.21428571428571419, 0.21428571428571419, 0.21428571428571419, 0.21428571428571419, 0.21428571428571419])

        self.assertContainerAlmostEqual(tb_plane.get_res(), res)

    def test_res3(self):
        """ test no_iter=True """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(1, 2, 0)
        tb_plane.wcc_calc(verbose=False,
                          num_strings=20,
                          use_pickle=False,
                          no_neighbour_check=True)

        res = ([0.0, 0.026315789473684209, 0.052631578947368418, 0.078947368421052627, 0.10526315789473684, 0.13157894736842105, 0.15789473684210525, 0.18421052631578946, 0.21052631578947367, 0.23684210526315788, 0.26315789473684209, 0.28947368421052633, 0.31578947368421051, 0.34210526315789469, 0.36842105263157893, 0.39473684210526316, 0.42105263157894735, 0.44736842105263153, 0.47368421052631576, 0.5], [[0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.50000000000000011, 0.50000000000000011], [0.58974358974358976, 0.58974358974358976], [0.61538461538461542, 0.61538461538461542], [0.64102564102564119, 0.64102564102564119], [0.64102564102564119, 0.64102564102564119], [0.64102564102564119, 0.64102564102564119]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.089743589743589869, 0.11538461538461542, 0.14102564102564119, 0.14102564102564119, 0.14102564102564119])

        self.assertContainerAlmostEqual(tb_plane.get_res(), res)

    def testkwargcheck1(self):
        """ test kwarg check on wcc_calc """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        tb_plane = tb_system.plane(1, 2, 0)
        self.assertRaises(
            TypeError,
            tb_plane.wcc_calc,
            invalid_kwarg = 3)

    def testkwargcheck2(self):
        """ test kwarg check on __init__ """
        self.createH(0, 0.3)
        # call to Z2Pack
        tb_system = z2pack.tb.System(self.H)
        self.assertRaises(
            TypeError,
            tb_system.plane,
            1, 2, 0, invalid_kwarg = 3)


if __name__ == "__main__":
    unittest.main()

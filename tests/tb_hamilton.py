#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Author:  Dominik Gresch <greschd@gmx.ch>
# Date:    15.10.2014 14:49:25 CEST
# File:    tb_hamilton.py

import sys
sys.path.append('../src')
import z2pack

from common import *

import types
import unittest

class TbHamiltonTestCase(CommonTestCase):
    
    def testH(self):
        H = z2pack.tb.Hamilton([1, 0, 0], [0, 1, 0], [0, 0, 1])
    
        # create the two atoms
        H.add_atom(([1, 1], 1), [0, 0, 0])
        H.add_atom(([-1, -1, 3], 1), [0.5, 0.6, 0.2])
        
        # add hopping between different atoms
        H.add_hopping(  ((0, 0), (1, 2)), 
                            z2pack.tb.vectors.combine([0,-1],[0,-1],0), 
                            0.1, 
                            phase = [1, -1j, 1j, -1])
        H.add_hopping(  ((0, 1), (1, 0)), 
                        z2pack.tb.vectors.combine([0,-1],[0,-1],0), 
                        0.7, 
                        phase = [1, 1j, -1j, -1])
        
        # add hopping between neighbouring orbitals of the same type
        H.add_hopping(  (((0, 0), (0, 0)),((0, 1), (0, 1))), 
                        z2pack.tb.vectors.neighbours([0,1]), 
                        -0.3, 
                        phase = [1])
        H.add_hopping(  (((1, 1), (1, 1)),((1, 0), (1, 0))), 
                        z2pack.tb.vectors.neighbours([0,1]), 
                        -0.8, 
                        phase = [1])
        H.add_hopping(  (((1, 1), (1, 1)),((1, 0), (1, 0))), 
                        [[1,2,3]], 
                        -0.9, 
                        phase = [1])
        self.assertContainerAlmostEqual(H._getM(2, [0.4, 0], 12), [[[(
        0.97924546870616369+0.01563333610524148j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.98632005833216951-0.11665019452827541j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.98635413582251508-0.14356573332649897j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.98337322864470522-0.030013850579515222j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.98262561441117224-0.019893927812354217j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.98635149689436563-0.14089656832222483j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.98634189067643185-0.12310301592585431j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.97972649562778513+0.011259479283698193j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.98553984335915268-0.072659405667018021j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.98636836547728612-0.14859629194354873j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]], [[(
        0.98583637216489839-0.082787144610690214j), 0j], [0j, (
        0.99348173534855022-0.11399140989054064j)]]])

if __name__ == "__main__":
    unittest.main()
    
